
AVRASM ver. 2.2.7  \\files7\data\benand\Microcontrôleurs\Projet\map\map\Map1Done.asm Sat May 28 21:27:59 2022

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m128def.inc'
\\files7\data\benand\Microcontrôleurs\Projet\map\map\Map1Done.asm(18): Including file '\\files7\data\benand\Microcontrôleurs\Projet\map\map\definitions.asm'
\\files7\data\benand\Microcontrôleurs\Projet\map\map\Map1Done.asm(19): Including file '\\files7\data\benand\Microcontrôleurs\Projet\map\map\macros.asm'
\\files7\data\benand\Microcontrôleurs\Projet\map\map\Map1Done.asm(34): Including file '\\files7\data\benand\Microcontrôleurs\Projet\map\map\macros_map.asm'
\\files7\data\benand\Microcontrôleurs\Projet\map\map\Map1Done.asm(35): Including file '\\files7\data\benand\Microcontrôleurs\Projet\map\map\file_sound.asm'
\\files7\data\benand\Microcontrôleurs\Projet\map\map\file_sound.asm(7): Including file '\\files7\data\benand\Microcontrôleurs\Projet\map\map\sound.asm'
\\files7\data\benand\Microcontrôleurs\Projet\map\map\Map1Done.asm(36): Including file '\\files7\data\benand\Microcontrôleurs\Projet\map\map\macros_LCD.asm'
\\files7\data\benand\Microcontrôleurs\Projet\map\map\macros_LCD.asm(7): Including file '\\files7\data\benand\Microcontrôleurs\Projet\map\map\lcd.asm'
\\files7\data\benand\Microcontrôleurs\Projet\map\map\macros_LCD.asm(8): Including file '\\files7\data\benand\Microcontrôleurs\Projet\map\map\encoder.asm'
\\files7\data\benand\Microcontrôleurs\Projet\map\map\macros_LCD.asm(9): Including file '\\files7\data\benand\Microcontrôleurs\Projet\map\map\printf.asm'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m128def.inc'
\\files7\data\benand\Microcontrôleurs\Projet\map\map\Map1Done.asm(18): Including file '\\files7\data\benand\Microcontrôleurs\Projet\map\map\definitions.asm'
\\files7\data\benand\Microcontrôleurs\Projet\map\map\Map1Done.asm(19): Including file '\\files7\data\benand\Microcontrôleurs\Projet\map\map\macros.asm'
\\files7\data\benand\Microcontrôleurs\Projet\map\map\Map1Done.asm(34): Including file '\\files7\data\benand\Microcontrôleurs\Projet\map\map\macros_map.asm'
\\files7\data\benand\Microcontrôleurs\Projet\map\map\Map1Done.asm(35): Including file '\\files7\data\benand\Microcontrôleurs\Projet\map\map\file_sound.asm'
\\files7\data\benand\Microcontrôleurs\Projet\map\map\file_sound.asm(7): Including file '\\files7\data\benand\Microcontrôleurs\Projet\map\map\sound.asm'
\\files7\data\benand\Microcontrôleurs\Projet\map\map\Map1Done.asm(36): Including file '\\files7\data\benand\Microcontrôleurs\Projet\map\map\macros_LCD.asm'
\\files7\data\benand\Microcontrôleurs\Projet\map\map\macros_LCD.asm(7): Including file '\\files7\data\benand\Microcontrôleurs\Projet\map\map\lcd.asm'
\\files7\data\benand\Microcontrôleurs\Projet\map\map\macros_LCD.asm(8): Including file '\\files7\data\benand\Microcontrôleurs\Projet\map\map\encoder.asm'
\\files7\data\benand\Microcontrôleurs\Projet\map\map\macros_LCD.asm(9): Including file '\\files7\data\benand\Microcontrôleurs\Projet\map\map\printf.asm'
                                 
                                 ; fichier	Map1Done.asm   cible ATmega128L-4MHz-STK300
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega128.xml ***********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m128def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega128
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega128
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M128DEF_INC_
                                 #define _M128DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega128
                                 #pragma AVRPART ADMIN PART_NAME ATmega128
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x97
                                 .equ	SIGNATURE_002	= 0x02
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UCSR1C	= 0x9d	; MEMORY MAPPED
                                 .equ	UDR1	= 0x9c	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0x9b	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0x9a	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0x98	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0x99	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0x95	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0x90	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x8c	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x8b	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x8a	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x88	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x89	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x86	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x87	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x84	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x85	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x82	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x83	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x80	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x81	; MEMORY MAPPED
                                 .equ	ETIMSK	= 0x7d	; MEMORY MAPPED
                                 .equ	ETIFR	= 0x7c	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x7a	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x78	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x79	; MEMORY MAPPED
                                 .equ	TWCR	= 0x74	; MEMORY MAPPED
                                 .equ	TWDR	= 0x73	; MEMORY MAPPED
                                 .equ	TWAR	= 0x72	; MEMORY MAPPED
                                 .equ	TWSR	= 0x71	; MEMORY MAPPED
                                 .equ	TWBR	= 0x70	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x6f	; MEMORY MAPPED
                                 .equ	XMCRA	= 0x6d	; MEMORY MAPPED
                                 .equ	XMCRB	= 0x6c	; MEMORY MAPPED
                                 .equ	EICRA	= 0x6a	; MEMORY MAPPED
                                 .equ	SPMCSR	= 0x68	; MEMORY MAPPED
                                 .equ	PORTG	= 0x65	; MEMORY MAPPED
                                 .equ	DDRG	= 0x64	; MEMORY MAPPED
                                 .equ	PING	= 0x63	; MEMORY MAPPED
                                 .equ	PORTF	= 0x62	; MEMORY MAPPED
                                 .equ	DDRF	= 0x61	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	XDIV	= 0x3c
                                 .equ	RAMPZ	= 0x3b
                                 .equ	EICRB	= 0x3a
                                 .equ	EIMSK	= 0x39
                                 .equ	EIFR	= 0x38
                                 .equ	TIMSK	= 0x37
                                 .equ	TIFR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OCR0	= 0x31
                                 .equ	ASSR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	OCDR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	SFIOR	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR0	= 0x0c
                                 .equ	UCSR0A	= 0x0b
                                 .equ	UCSR0B	= 0x0a
                                 .equ	UBRR0L	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	PORTE	= 0x03
                                 .equ	DDRE	= 0x02
                                 .equ	PINE	= 0x01
                                 .equ	PINF	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	I2BR	= TWBR	; For compatibility
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	I2CR	= TWCR	; For compatibility
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	I2IE	= TWIE	; For compatibility
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	I2EN	= TWEN	; For compatibility
                                 .equ	ENI2C	= TWEN	; For compatibility
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	I2WC	= TWWC	; For compatibility
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	I2STO	= TWSTO	; For compatibility
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	I2STA	= TWSTA	; For compatibility
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	I2EA	= TWEA	; For compatibility
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 .equ	I2INT	= TWINT	; For compatibility
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	I2SR	= TWSR	; For compatibility
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWS0	= TWPS0	; For compatibility
                                 .equ	I2GCE	= TWPS0	; For compatibility
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS1	= TWPS1	; For compatibility
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	I2S3	= TWS3	; For compatibility
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	I2S4	= TWS4	; For compatibility
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	I2S5	= TWS5	; For compatibility
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	I2S6	= TWS6	; For compatibility
                                 .equ	TWS7	= 7	; TWI Status
                                 .equ	I2S7	= TWS7	; For compatibility
                                 
                                 ; TWDR - TWI Data register
                                 .equ	I2DR	= TWDR	; For compatibility
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	I2AR	= TWAR	; For compatibility
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR00	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR01	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR02	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR03	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR04	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR05	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR06	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR07	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	UCSZ2	= UCSZ02	; For compatibility
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL0	= 6	; USART Mode Select
                                 
                                 ; UBRR0H - USART Baud Rate Register Hight Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR10	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR11	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR12	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR13	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR14	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR15	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR16	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR17	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL1	= 6	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register Hight Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	SM2	= 2	; Sleep Mode Select
                                 .equ	SM0	= 3	; Sleep Mode Select
                                 .equ	SM1	= 4	; Sleep Mode Select
                                 .equ	SE	= 5	; Sleep Enable
                                 .equ	SRW10	= 6	; External SRAM Wait State Select
                                 .equ	SRE	= 7	; External SRAM Enable
                                 
                                 ; XMCRA - External Memory Control Register A
                                 .equ	SRW11	= 1	; Wait state select bit upper page
                                 .equ	SRW00	= 2	; Wait state select bit lower page
                                 .equ	SRW01	= 3	; Wait state select bit lower page
                                 .equ	SRL0	= 4	; Wait state page limit
                                 .equ	SRL1	= 5	; Wait state page limit
                                 .equ	SRL2	= 6	; Wait state page limit
                                 
                                 ; XMCRB - External Memory Control Register B
                                 .equ	XMM0	= 0	; External Memory High Mask
                                 .equ	XMM1	= 1	; External Memory High Mask
                                 .equ	XMM2	= 2	; External Memory High Mask
                                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value
                                 .equ	CAL1	= 1	; Oscillator Calibration Value
                                 .equ	CAL2	= 2	; Oscillator Calibration Value
                                 .equ	CAL3	= 3	; Oscillator Calibration Value
                                 .equ	CAL4	= 4	; Oscillator Calibration Value
                                 .equ	CAL5	= 5	; Oscillator Calibration Value
                                 .equ	CAL6	= 6	; Oscillator Calibration Value
                                 .equ	CAL7	= 7	; Oscillator Calibration Value
                                 
                                 ; XDIV - XTAL Divide Control Register
                                 .equ	XDIV0	= 0	; XTAl Divide Select Bit 0
                                 .equ	XDIV1	= 1	; XTAl Divide Select Bit 1
                                 .equ	XDIV2	= 2	; XTAl Divide Select Bit 2
                                 .equ	XDIV3	= 3	; XTAl Divide Select Bit 3
                                 .equ	XDIV4	= 4	; XTAl Divide Select Bit 4
                                 .equ	XDIV5	= 5	; XTAl Divide Select Bit 5
                                 .equ	XDIV6	= 6	; XTAl Divide Select Bit 6
                                 .equ	XDIVEN	= 7	; XTAL Divide Enable
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMCR	= SPMCSR	; For compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 
                                 ; ***** MISC *************************
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR321	= 0	; Prescaler Reset Timer/Counter3, Timer/Counter2, and Timer/Counter1
                                 .equ	PSR1	= PSR321	; For compatibility
                                 .equ	PSR2	= PSR321	; For compatibility
                                 .equ	PSR3	= PSR321	; For compatibility
                                 .equ	PSR0	= 1	; Prescaler Reset Timer/Counter0
                                 .equ	PUD	= 2	; Pull Up Disable
                                 ;.equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	GICR	= EIMSK	; For compatibility
                                 .equ	GIMSK	= EIMSK	; For compatibility
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	GIFR	= EIFR	; For compatibility
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE3	= 3	; 
                                 .equ	PE3	= 3	; For compatibility
                                 .equ	PORTE4	= 4	; 
                                 .equ	PE4	= 4	; For compatibility
                                 .equ	PORTE5	= 5	; 
                                 .equ	PE5	= 5	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 .equ	PORTE7	= 7	; 
                                 .equ	PE7	= 7	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE3	= 3	; 
                                 .equ	DDE4	= 4	; 
                                 .equ	DDE5	= 5	; 
                                 .equ	DDE6	= 6	; 
                                 .equ	DDE7	= 7	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE3	= 3	; 
                                 .equ	PINE4	= 4	; 
                                 .equ	PINE5	= 5	; 
                                 .equ	PINE6	= 6	; 
                                 .equ	PINE7	= 7	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF2	= 2	; 
                                 .equ	PF2	= 2	; For compatibility
                                 .equ	PORTF3	= 3	; 
                                 .equ	PF3	= 3	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF2	= 2	; 
                                 .equ	DDF3	= 3	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF2	= 2	; 
                                 .equ	PINF3	= 3	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** PORTG ************************
                                 ; PORTG - Data Register, Port G
                                 .equ	PORTG0	= 0	; 
                                 .equ	PG0	= 0	; For compatibility
                                 .equ	PORTG1	= 1	; 
                                 .equ	PG1	= 1	; For compatibility
                                 .equ	PORTG2	= 2	; 
                                 .equ	PG2	= 2	; For compatibility
                                 .equ	PORTG3	= 3	; 
                                 .equ	PG3	= 3	; For compatibility
                                 .equ	PORTG4	= 4	; 
                                 .equ	PG4	= 4	; For compatibility
                                 
                                 ; DDRG - Data Direction Register, Port G
                                 .equ	DDG0	= 0	; 
                                 .equ	DDG1	= 1	; 
                                 .equ	DDG2	= 2	; 
                                 .equ	DDG3	= 3	; 
                                 .equ	DDG4	= 4	; 
                                 
                                 ; PING - Input Pins, Port G
                                 .equ	PING0	= 0	; 
                                 .equ	PING1	= 1	; 
                                 .equ	PING2	= 2	; 
                                 .equ	PING3	= 3	; 
                                 .equ	PING4	= 4	; 
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 0
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode 0
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; ASSR - Asynchronus Status Register
                                 .equ	TCR0UB	= 0	; Timer/Counter Control Register 0 Update Busy
                                 .equ	OCR0UB	= 1	; Output Compare register 0 Busy
                                 .equ	TCN0UB	= 2	; Timer/Counter0 Update Busy
                                 .equ	AS0	= 3	; Asynchronus Timer/Counter 0
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR0	= 1	; Prescaler Reset Timer/Counter0
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; ETIMSK - Extended Timer/Counter Interrupt Mask Register
                                 .equ	OCIE1C	= 0	; Timer/Counter 1, Output Compare Match C Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; ETIFR - Extended Timer/Counter Interrupt Flag register
                                 .equ	OCF1C	= 0	; Timer/Counter 1, Output Compare C Match Flag
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR321	= 0	; Prescaler Reset, T/C3, T/C2, T/C1
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode Bit 0
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode Bit 1
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Clock Select bit 0
                                 .equ	CS11	= 1	; Clock Select 1 bit 1
                                 .equ	CS12	= 2	; Clock Select1 bit 2
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare for channel C
                                 .equ	FOC1B	= 6	; Force Output Compare for channel B
                                 .equ	FOC1A	= 7	; Force Output Compare for channel A
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TCCR2 - Timer/Counter Control Register
                                 .equ	CS20	= 0	; Clock Select
                                 .equ	CS21	= 1	; Clock Select
                                 .equ	CS22	= 2	; Clock Select
                                 .equ	WGM21	= 3	; Waveform Generation Mode
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Match Output Mode
                                 .equ	COM21	= 5	; Compare Match Output Mode
                                 .equ	WGM20	= 6	; Wafeform Generation Mode
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter Register
                                 .equ	TCNT2_0	= 0	; Timer/Counter Register Bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter Register Bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter Register Bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter Register Bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter Register Bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter Register Bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter Register Bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter Register Bit 7
                                 
                                 ; OCR2 - Output Compare Register
                                 .equ	OCR2_0	= 0	; Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Output Compare Register Bit 7
                                 
                                 ; TIMSK - 
                                 .equ	TOIE2	= 6	; 
                                 .equ	OCIE2	= 7	; 
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; ETIMSK - Extended Timer/Counter Interrupt Mask Register
                                 .equ	OCIE3C	= 1	; Timer/Counter3, Output Compare Match Interrupt Enable
                                 .equ	TOIE3	= 2	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3B	= 3	; Timer/Counter3 Output CompareB Match Interrupt Enable
                                 .equ	OCIE3A	= 4	; Timer/Counter3 Output CompareA Match Interrupt Enable
                                 .equ	TICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; ETIFR - Extended Timer/Counter Interrupt Flag register
                                 .equ	OCF3C	= 1	; Timer/Counter3 Output Compare C Match Flag
                                 .equ	TOV3	= 2	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3B	= 3	; Output Compare Flag 1B
                                 .equ	OCF3A	= 4	; Output Compare Flag 1A
                                 .equ	ICF3	= 5	; Input Capture Flag 1
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR321	= 0	; Prescaler Reset, T/C3, T/C2, T/C1
                                 ;.equ	PSR1	= PSR321	; For compatibility
                                 ;.equ	PSR2	= PSR321	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode Bit 0
                                 .equ	PWM30	= WGM30	; For compatibility
                                 .equ	WGM31	= 1	; Waveform Generation Mode Bit 1
                                 .equ	PWM31	= WGM31	; For compatibility
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Comparet Ouput Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 3A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Clock Select 3 bit 0
                                 .equ	CS31	= 1	; Clock Select 3 bit 1
                                 .equ	CS32	= 2	; Clock Select3 bit 2
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	CTC30	= WGM32	; For compatibility
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	CTC31	= WGM33	; For compatibility
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3  Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare for channel C
                                 .equ	FOC3B	= 6	; Force Output Compare for channel B
                                 .equ	FOC3A	= 7	; Force Output Compare for channel A
                                 
                                 ; TCNT3L - Timer/Counter3 Low Byte
                                 .equ	TCN3L0	= 0	; Timer/Counter 3 bit 0
                                 .equ	TCN3L1	= 1	; Timer/Counter 3 bit 1
                                 .equ	TCN3L2	= 2	; Timer/Counter 3 bit 2
                                 .equ	TCN3L3	= 3	; Timer/Counter 3 bit 3
                                 .equ	TCN3L4	= 4	; Timer/Counter 3 bit 4
                                 .equ	TCN3L5	= 5	; Timer/Counter 3 bit 5
                                 .equ	TCN3L6	= 6	; Timer/Counter 3 bit 6
                                 .equ	TCN3L7	= 7	; Timer/Counter 3 bit 7
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDTCSR	= WDTCR	; For compatibility
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDTOE	= WDCE	; For compatibility
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADFR	= 5	; ADC  Free Running Select
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	CKOPT	= 4	; Oscillator Options
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	WDTON	= 0	; Watchdog timer always on
                                 .equ	M103C	= 1	; ATmega103 compatibility mode
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0xffff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 4096
                                 .equ	RAMEND	= 0x10ff
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 131072
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 4096
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0xf000
                                 .equ	NRWW_STOP_ADDR	= 0xffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0xefff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0xfe00
                                 .equ	SECONDBOOTSTART	= 0xfc00
                                 .equ	THIRDBOOTSTART	= 0xf800
                                 .equ	FOURTHBOOTSTART	= 0xf000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                                 .equ	OC2addr	= 0x0012	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x0014	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0016	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0018	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x001a	; Timer/Counter Compare Match B
                                 .equ	OVF1addr	= 0x001c	; Timer/Counter1 Overflow
                                 .equ	OC0addr	= 0x001e	; Timer/Counter0 Compare Match
                                 .equ	OVF0addr	= 0x0020	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0024	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0026	; USART0 Data Register Empty
                                 .equ	UTXC0addr	= 0x0028	; USART0, Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	OC1Caddr	= 0x0030	; Timer/Counter1 Compare Match C
                                 .equ	ICP3addr	= 0x0032	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0034	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0036	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0038	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x003a	; Timer/Counter3 Overflow
                                 .equ	URXC1addr	= 0x003c	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x003e	; USART1, Data Register Empty
                                 .equ	UTXC1addr	= 0x0040	; USART1, Tx Complete
                                 .equ	TWIaddr	= 0x0042	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0044	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 70	; size in words
                                 
                                 #endif  /* _M128DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ;but: Jeu jouable type Mario visualisable sur la matrice de LED 
                                 ;    
                                 ; usage: boutons sur PORTD, ws2812 sur PORTE (bit 1)
                                 ;        presser bouton 0 pour avancer, bouton 1 pour sauter, (bouton 6 pour redémarrer)
                                 ;		 Des niveaux de jeu sont stockés en mémoire puis afficher sur la matrice
                                 ;	     Lorsque B0 est pressé, la matrice affiche une colonne plus loin en mémoire
                                 ;        qui se traduit par un décalage vers la droite du niveau.
                                 ;		 Lorsque B1 est pressé, le personnage (pixel vert) effectue un saut. Les deux
                                 ;		 actions sont combinables. 
                                 ;		 Le codeur angulaire permet de choisir le niveau du son de 0 à 9 (encodeur pressé)
                                 ;		 puis le choix du niveau (encodeur non pressé) 
                                 ;		 Le reste des boutons à actionner est indiqué sur l'écran LCD au moment voulu
                                 ;		L'écran LCD permet de communiquer avec l'utilisateur
                                 ;
                                 ; 20220315 AxS
                                 
                                 .include "definitions.asm"	
                                 
                                 ; purpose library, definition of addresses and constants
                                 ; 20171114 A.S.
                                 
                                 ; === definitions  ===
                                 .list
                                 .include "macros.asm"	
                                 
                                 ; purpose library, general-purpose macros
                                 ; author (c) R.Holzer (adapted MICRO210/EE208 A.Schmid)
                                 ; v2019.01 20180820 AxS
                                 
                                 ; ==============
                                 ; 	pointers
                                 ; ==============
                                 
                                 ; --- loading an immediate into a pointer XYZ,SP ---
                                 .macro 	LDIX	; sram
                                 	ldi	xl, low(@0)
                                 	ldi	xh,high(@0)
                                 	.endmacro	
                                 .macro 	LDIY	; sram	
                                 	ldi	yl, low(@0)
                                 	ldi	yh,high(@0)
                                 	.endmacro	
                                 .macro 	LDIZ	; sram
                                 	ldi	zl, low(@0)
                                 	ldi	zh,high(@0)
                                 	
                                 	.endmacro
                                 .macro	LDZD	; sram, reg	; sram+reg -> Z
                                 	mov	zl,@1
                                 	clr	zh
                                 	subi	zl, low(-@0)
                                 	sbci	zh,high(-@0)
                                 	.endmacro
                                 .macro	LDSP	; sram
                                 	ldi	r16, low(@0)
                                 	out	spl,r16
                                 	ldi	r16,high(@0)
                                 	out	sph,r16
                                 	.endmacro
                                 
                                 ; --- load/store SRAM addr into pointer XYZ ---	
                                 .macro 	LDSX	; sram
                                 	lds	xl,@0
                                 	lds	xh,@0+1
                                 	.endmacro
                                 .macro 	LDSY	; sram
                                 	lds	yl,@0
                                 	lds	yh,@0+1
                                 	.endmacro
                                 .macro 	LDSZ	; sram
                                 	lds	zl,@0
                                 	lds	zh,@0+1
                                 	.endmacro
                                 .macro 	STSX	; sram
                                 	sts	@0,  xl
                                 	sts	@0+1,xh
                                 	.endmacro	
                                 .macro 	STSY	; sram
                                 	sts	@0,  yl
                                 	sts	@0+1,yh
                                 	.endmacro
                                 .macro 	STSZ	; sram
                                 	sts	@0,  zl
                                 	sts	@0+1,zh
                                 	.endmacro	
                                 
                                 ; --- push/pop pointer XYZ ---
                                 .macro	PUSHX			; push X
                                 	push	xl
                                 	push	xh
                                 	.endmacro
                                 .macro	POPX			; pop X
                                 	pop	xh
                                 	pop	xl
                                 	.endmacro
                                 	
                                 .macro	PUSHY			; push Y
                                 	push	yl
                                 	push	yh
                                 	.endmacro
                                 .macro	POPY			; pop Y
                                 	pop	yh
                                 	pop	yl
                                 	.endmacro
                                 
                                 .macro	PUSHZ			; push Z
                                 	push	zl
                                 	push	zh
                                 	.endmacro
                                 .macro	POPZ			; pop Z
                                 	pop	zh
                                 	pop	zl
                                 	.endmacro
                                 
                                 ; --- multiply/divide Z ---	
                                 .macro	MUL2Z			; multiply Z by 2
                                 	lsl	zl
                                 	rol	zh
                                 	.endmacro
                                 .macro	DIV2Z			; divide Z by 2
                                 	lsr	zh
                                 	ror	zl
                                 	.endmacro
                                 
                                 ; --- add register to pointer XYZ ---	
                                 .macro	ADDX	;reg		; x <- y+reg
                                 	add	xl,@0
                                 	brcc	PC+2
                                 	subi	xh,-1		; add carry
                                 	.endmacro
                                 .macro	ADDY	;reg		; y <- y+reg
                                 	add	yl,@0
                                 	brcc	PC+2
                                 	subi	yh,-1		; add carry
                                 	.endmacro
                                 .macro	ADDZ	;reg		; z <- z+reg
                                 	add	zl,@0
                                 	brcc	PC+2
                                 	subi	zh,-1		; add carry
                                 	.endmacro
                                 
                                 ; ===================
                                 ; 	miscellaneous
                                 ; ===================
                                 
                                 ; --- output/store (regular I/O space) immediate value ---
                                 .macro	OUTI	; port,k	output immediate value to port
                                 	ldi	w,@1
                                 	out	@0,w
                                 	.endmacro
                                 
                                 ; --- output/store (extended I/O space) immediate value ---
                                 .macro OUTEI	; port,k    output immediate value to port
                                 	ldi	w,@1
                                 	sts	@0,w
                                 	.endmacro
                                 
                                 ; --- add immediate value ---
                                 .macro	ADDI
                                 	subi	@0,-@1
                                 	.endmacro
                                 .macro	ADCI
                                 	sbci	@0,-@1
                                 	.endmacro
                                 
                                 ; --- inc/dec with range limitation ---
                                 .macro	INC_LIM	; reg,limit
                                 	cpi	@0,@1
                                 	brlo	PC+3
                                 	ldi	@0,@1	
                                 	rjmp	PC+2
                                 	inc	@0
                                 	.endmacro
                                 
                                 .macro	DEC_LIM	; reg,limit
                                 	cpi	@0,@1
                                 	breq	PC+5
                                 	brlo	PC+3
                                 	dec	@0
                                 	rjmp	PC+2
                                 	ldi	@0,@1
                                 	.endmacro
                                 
                                 ; --- inc/dec with cyclic range ---
                                 .macro	INC_CYC	; reg,low,high
                                 	cpi	@0,@2
                                 	brsh	_low	; reg>=high then reg=low
                                 	cpi	@0,@1
                                 	brlo	_low	; reg< low  then reg=low
                                 	inc	@0
                                 	rjmp	_done
                                 _low:	ldi	@0,@1
                                 _done:	
                                     .endmacro
                                 	
                                 .macro	DEC_CYC	; reg,low,high
                                 	cpi	@0,@1
                                 	breq	_high	; reg=low then reg=high
                                 	brlo	_high	; reg<low then reg=high
                                 	dec	@0	
                                 	cpi	@0,@2
                                 	brsh	_high	; reg>=high then high
                                 	rjmp	_done
                                 _high:	ldi	@0,@2
                                 _done:	
                                 	.endmacro
                                 
                                 .macro	INCDEC	;port,b1,b2,reg,low,high
                                 	sbic	@0,@1
                                 	rjmp	PC+6
                                 
                                 	cpi	@3,@5
                                 	brlo	PC+3
                                 	ldi	@3,@4	
                                 	rjmp	PC+2
                                 	inc	@3
                                 
                                 	sbic	@0,@2
                                 	rjmp	PC+7
                                 	
                                 	cpi	@3,@4
                                 	breq	PC+5
                                 	brlo	PC+3
                                 	dec	@3
                                 	rjmp	PC+2
                                 	ldi	@3,@5
                                 	.endmacro		
                                 
                                 ; --- wait loops ---
                                 ; wait 10...196608 cycles
                                 .macro	WAIT_C	; k
                                 	ldi	w,  low((@0-7)/3)
                                 	mov	u,w			; u=LSB
                                 	ldi	w,high((@0-7)/3)+1	; w=MSB
                                 	dec	u
                                 	brne	PC-1
                                 	dec	u
                                 	dec	w
                                 	brne	PC-4
                                 	.endmacro
                                 
                                 ; wait micro-seconds (us)
                                 ; us = x*3*1000'000/clock)	==> x=us*clock/3000'000
                                 .macro	WAIT_US ; k
                                 	ldi	w, low((clock/1000*@0/3000)-1)
                                 	mov	u,w
                                 	ldi	w,high((clock/1000*@0/3000)-1)+1 ; set up: 3 cyles
                                 	dec	u
                                 	brne	PC-1		; inner loop: 3 cycles
                                 	dec	u		; adjustment for outer loop
                                 	dec	w
                                 	brne	PC-4
                                 	.endmacro
                                 
                                 ; wait mili-seconds (ms)
                                 .macro	WAIT_MS ; k
                                 	ldi	w, low(@0)
                                 	mov	u,w		; u = LSB	
                                 	ldi	w,high(@0)+1	; w = MSB
                                 wait_ms:
                                 	push	w		; wait 1000 usec
                                 	push	u
                                 	ldi	w, low((clock/3000)-5)	
                                 	mov	u,w
                                 	ldi	w,high((clock/3000)-5)+1
                                 	dec	u
                                 	brne	PC-1		; inner loop: 3 cycles
                                 	dec	u		; adjustment for outer loop
                                 	dec	w
                                 	brne	PC-4
                                 	pop	u
                                 	pop	w
                                 	
                                 	dec	u
                                 	brne	wait_ms
                                 	dec	w
                                 	brne	wait_ms
                                 	.endmacro
                                 
                                 ; --- conditional jumps/calls ---
                                 .macro	JC0			; jump if carry=0
                                 	brcs	PC+2	
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	JC1			; jump if carry=1
                                 	brcc	PC+2	
                                 	rjmp	@0
                                 	.endmacro
                                 
                                 .macro	JK	; reg,k,addr	; jump if reg=k
                                 	cpi	@0,@1
                                 	breq	@2
                                 	.endmacro
                                 .macro	_JK	; reg,k,addr	; jump if reg=k
                                 	cpi	@0,@1
                                 	brne	PC+2
                                 	rjmp	@2
                                 	.endmacro	
                                 .macro	JNK	; reg,k,addr	; jump if not(reg=k)
                                 	cpi	@0,@1
                                 	brne	@2
                                 	.endmacro 
                                 
                                 .macro	CK	; reg,k,addr	; call if reg=k
                                 	cpi	@0,@1
                                 	brne	PC+2
                                 	rcall	@2
                                 	.endmacro
                                 .macro	CNK	; reg,k,addr	; call if not(reg=k)
                                 	cpi	@0,@1
                                 	breq	PC+2
                                 	rcall	@2
                                 	.endmacro 
                                 
                                 .macro	JSK	; sram,k,addr	; jump if sram=k
                                 	lds	w,@0
                                 	cpi	w,@1
                                 	breq	@2
                                 	.endmacro 
                                 .macro	JSNK	; sram,k,addr	; jump if not(sram=k)
                                 	lds	w,@0
                                 	cpi	w,@1
                                 	brne	@2
                                 	.endmacro
                                 
                                 ; --- loops ---
                                 .macro	DJNZ	; reg,addr	; decr and jump if not zero
                                 	dec	@0
                                 	brne	@1
                                 	.endmacro
                                 .macro	DJNK	; reg,k,addr	; decr and jump if not k
                                 	dec	@0
                                 	cpi	@0,@1
                                 	brne	@2
                                 	.endmacro
                                 
                                 .macro	IJNZ	; reg,addr	; inc and jump if not zero
                                 	inc	@0
                                 	brne	@1
                                 	.endmacro
                                 .macro	IJNK	; reg,k,addr	; inc and jump if not k
                                 	inc	@0
                                 	cpi	@0,@1
                                 	brne	@2
                                 	.endmacro
                                 .macro	_IJNK	; reg,k,addr	; inc and jump if not k
                                 	inc	@0
                                 	ldi	w,@1
                                 	cp	@0,w
                                 	brne	@2
                                 	.endmacro
                                 
                                 .macro	ISJNK	; sram,k,addr	; inc sram and jump if not k
                                 	lds	w,@0
                                 	inc	w
                                 	sts	@0,w
                                 	cpi	w,@1
                                 	brne	@2
                                 	.endmacro
                                 .macro	_ISJNK	; sram,k,addr	; inc sram and jump if not k
                                 	lds	w,@0
                                 	inc	w
                                 	sts	@0,w
                                 	cpi	w,@1
                                 	breq	PC+2	
                                 	rjmp	@2
                                 	.endmacro
                                 
                                 .macro	DSJNK	; sram,k,addr	; dec sram and jump if not k
                                 	lds	w,@0
                                 	dec	w
                                 	sts	@0,w
                                 	cpi	w,@1
                                 	brne	@2
                                 	.endmacro
                                 
                                 ; --- table lookup ---
                                 .macro	LOOKUP	;reg, index,tbl
                                 	push	ZL
                                 	push	ZH
                                 	mov	zl,@1		; move index into z
                                 	clr	zh
                                 	subi	zl, low(-2*@2)	; add base address of table
                                 	sbci	zh,high(-2*@2)	
                                 	lpm			; load program memory (into r0)
                                 	mov	@0,r0
                                 	pop	ZH
                                 	pop	ZL
                                 	.endmacro
                                 
                                 .macro	LOOKUP2	;r1,r0, index,tbl
                                 	mov	zl,@2		; move index into z
                                 	clr	zh
                                 	lsl	zl		; multiply by 2
                                 	rol	zh
                                 	subi	zl, low(-2*@3)	; add base address of table
                                 	sbci	zh,high(-2*@3)
                                 	lpm			; get LSB byte
                                 	mov	w,r0		; temporary store LSB in w
                                 	adiw	zl,1		; increment Z
                                 	lpm			; get MSB byte
                                 	mov	@0,r0		; mov MSB to res1
                                 	mov	@1,w		; mov LSB to res0
                                 	.endmacro
                                 
                                 .macro	LOOKUP4	;r3,r2,r1,r0, index,tbl
                                 	mov	zl,@4		; move index into z
                                 	clr	zh
                                 	lsl	zl		; multiply by 2
                                 	rol	zh
                                 	lsl	zl		; multiply by 2
                                 	rol	zh	
                                 	subi	zl, low(-2*@5)	; add base address of table
                                 	sbci	zh,high(-2*@5)
                                 	lpm
                                 	mov	@1,r0		; load high word LSB
                                 	adiw	zl,1
                                 	lpm
                                 	mov	@0,r0		; load high word MSB
                                 	adiw	zl,1
                                 	lpm
                                 	mov	@3,r0		; load low word LSB		
                                 	adiw	zl,1
                                 	lpm
                                 	mov	@2,r0		; load low word MSB
                                 	.endmacro
                                 
                                 .macro	LOOKDOWN ;reg,index,tbl
                                 	ldi	ZL, low(2*@2)	; load table address
                                 	ldi	ZH,high(2*@2)
                                 	clr	@1
                                 loop:	lpm
                                 	cp	r0,@0
                                 	breq	found
                                 	inc	@1
                                 	adiw	ZL,1
                                 	tst	r0
                                 	breq	notfound
                                 	rjmp	loop
                                 notfound:
                                 	ldi	@1,-1
                                 found:	
                                 	.endmacro
                                 
                                 ; --- branch table ---
                                 .macro	C_TBL	; reg,tbl
                                 	ldi	ZL, low(2*@1)
                                 	ldi	ZH,high(2*@1)
                                 	lsl	@0
                                 	add	ZL,@0
                                 	brcc	PC+2
                                 	inc	ZH
                                 	lpm
                                 	push	r0
                                 	lpm
                                 	mov	zh,r0
                                 	pop	zl
                                 	icall
                                 	.endmacro
                                 .macro	J_TBL	; reg,tbl	
                                 	ldi	ZL, low(2*@1)
                                 	ldi	ZH,high(2*@1)
                                 	lsl	@0
                                 	add	ZL,@0
                                 	brcc	PC+2
                                 	inc	ZH
                                 	lpm
                                 	push	r0
                                 	lpm
                                 	mov	zh,r0
                                 	pop	zl	
                                 	ijmp
                                 	.endmacro
                                 
                                 .macro	BRANCH	; reg		; branching using the stack
                                 	ldi	w, low(tbl)
                                 	add	w,@0
                                 	push	w
                                 	ldi	w,high(tbl)
                                 	brcc	PC+2
                                 	inc	w
                                 	push	w
                                 	ret
                                 tbl:
                                 	.endmacro	
                                 
                                 ; --- multiply/division ---
                                 .macro	DIV2	; reg
                                 	lsr	@0
                                 	.endmacro
                                 .macro	DIV4	; reg
                                 	lsr	@0
                                 	lsr	@0
                                 	.endmacro	
                                 .macro	DIV8	; reg
                                 	lsr	@0
                                 	lsr	@0
                                 	lsr	@0
                                 	.endmacro
                                 	
                                 .macro	MUL2	; reg
                                 	lsl	@0
                                 	.endmacro
                                 .macro	MUL4	; reg
                                 	lsl	@0
                                 	lsl	@0
                                 	.endmacro
                                 .macro	MUL8	; reg
                                 	lsl	@0
                                 	lsl	@0
                                 	lsl	@0
                                 	.endmacro
                                 
                                 ; ====================================
                                 ; 	extending existing instructios
                                 ; ====================================
                                 
                                 ; --- immediate ops with r0..r15 ---
                                 .macro	_ADDI
                                 	ldi	w,@1
                                 	add	@0,w
                                 	.endmacro
                                 .macro	_ADCI
                                 	ldi	w,@1
                                 	adc	@0,w
                                 	.endmacro
                                 .macro	_SUBI
                                 	ldi	w,@1
                                 	sub	@0,w
                                 	.endmacro
                                 .macro	_SBCI
                                 	ldi	w,@1
                                 	sbc	@0,w
                                 	.endmacro
                                 .macro	_ANDI
                                 	ldi	w,@1
                                 	and	@0,w
                                 	.endmacro
                                 .macro	_ORI
                                 	ldi	w,@1
                                 	or	@0,w
                                 	.endmacro
                                 .macro	_EORI
                                 	ldi	w,@1
                                 	eor	@0,w
                                 	.endmacro
                                 .macro	_SBR
                                 	ldi	w,@1
                                 	or	@0,w
                                 	.endmacro
                                 .macro	_CBR
                                 	ldi	w,~@1
                                 	and	@0,w
                                 	.endmacro
                                 .macro	_CPI
                                 	ldi	w,@1
                                 	cp	@0,w
                                 	.endmacro
                                 .macro	_LDI
                                 	ldi	w,@1
                                 	mov	@0,w
                                 	.endmacro
                                 
                                 ; --- bit access for port p32..p63 ---
                                 .macro	_SBI
                                 	in	w,@0
                                 	ori	w,1<<@1
                                 	out	@0,w
                                 	.endmacro
                                 .macro	_CBI
                                 	in	w,@0
                                 	andi	w,~(1<<@1)
                                 	out	@0,w
                                 	.endmacro
                                 	
                                 ; --- extending branch distance to +/-2k ---
                                 .macro	_BREQ
                                 	brne	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRNE
                                 	breq	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRCS
                                 	brcc	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRCC
                                 	brcs	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRSH
                                 	brlo	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRLO
                                 	brsh	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRMI
                                 	brpl	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRPL
                                 	brmi	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRGE
                                 	brlt	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRLT
                                 	brge	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRHS
                                 	brhc	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRHC
                                 	brhs	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRTS
                                 	brtc	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRTC
                                 	brts	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRVS
                                 	brvc	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRVC
                                 	brvs	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRIE
                                 	brid	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	_BRID
                                 	brie	PC+2
                                 	rjmp	@0
                                 	.endmacro
                                 
                                 ; ====================
                                 ; 	bit operations
                                 ; ====================
                                 
                                 ; --- moving bits ---
                                 .macro	MOVB	; reg1,b1, reg2,b2	; reg1,bit1 <- reg2,bit2
                                 	bst	@2,@3
                                 	bld	@0,@1
                                 	.endmacro
                                 .macro	OUTB	; port1,b1, reg2,b2	; port1,bit1 <- reg2,bit2
                                 	sbrs	@2,@3
                                 	cbi	@0,@1
                                 	sbrc	@2,@3
                                 	sbi	@0,@1
                                 	.endmacro
                                 .macro	INB	; reg1,b1, port2,b2	; reg1,bit1 <- port2,bit2
                                 	sbis	@2,@3
                                 	cbr	@0,1<<@1
                                 	sbic	@2,@3
                                 	sbr	@0,1<<@1
                                 	.endmacro
                                 
                                 .macro	Z2C				; zero to carry
                                 	sec
                                 	breq	PC+2	; (Z=1)
                                 	clc
                                 	.endmacro
                                 .macro	Z2INVC				; zero to inverse carry
                                 	sec
                                 	brne	PC+2	; (Z=0)
                                 	clc
                                 	.endmacro
                                 
                                 .macro	C2Z				; carry to zero
                                 	sez
                                 	brcs	PC+2	; (C=1)
                                 	clz
                                 	.endmacro
                                 
                                 .macro	B2C	; reg,b			; bit to carry
                                 	sbrc	@0,@1
                                 	sec
                                 	sbrs	@0,@1
                                 	clc
                                 	.endmacro
                                 .macro	C2B	; reg,b			; carry to bit
                                 	brcc	PC+2
                                 	sbr	@0,(1<<@1)
                                 	brcs	PC+2
                                 	cbr	@0,(1<<@1)
                                 	.endmacro
                                 .macro	P2C	; port,b		; port to carry
                                 	sbic	@0,@1
                                 	sec
                                 	sbis	@0,@1
                                 	clc
                                 	.endmacro
                                 .macro	C2P	; port,b		; carry to port
                                 	brcc	PC+2
                                 	sbi	@0,@1
                                 	brcs	PC+2
                                 	cbi	@0,@1
                                 	.endmacro
                                 
                                 ; --- inverting bits ---
                                 .macro	INVB	; reg,bit		; inverse reg,bit
                                 	ldi	w,(1<<@1)
                                 	eor	@0,w
                                 	.endmacro
                                 .macro	INVP	; port,bit		; inverse port,bit	
                                 	sbis	@0,@1
                                 	rjmp	PC+3
                                 	cbi	@0,@1
                                 	rjmp	PC+2
                                 	sbi	@0,@1
                                 	.endmacro
                                 .macro	INVC				; inverse carry	
                                 	brcs	PC+3
                                 	sec
                                 	rjmp	PC+2
                                 	clc
                                 	.endmacro
                                 
                                 ; --- setting a single bit ---
                                 .macro	SETBIT	; reg(0..7)
                                 ; in	reg (0..7)
                                 ; out	reg with bit (0..7) set to 1.
                                 ; 0=00000001
                                 ; 1=00000010
                                 ; ...
                                 ; 7=10000000
                                 	mov	w,@0
                                 	clr	@0
                                 	inc	@0
                                 	andi	w,0b111	
                                 	breq	PC+4
                                 	lsl	@0
                                 	dec	w
                                 	brne	PC-2
                                 	.endmacro
                                 
                                 ; --- logical operations with masks ---
                                 .macro	MOVMSK	; reg1,reg2,mask	; reg1 <- reg2 (mask)
                                 	ldi	w,~@2	
                                 	and	@0,w
                                 	ldi	w,@2
                                 	and	@1,w	
                                 	or	@0,@1
                                 	.endmacro	
                                 .macro	ANDMSK	; reg1,reg2,mask	; reg1 <- ret 1 AND reg2 (mask)		
                                 	mov	w,@1
                                 	ori	w,~@2
                                 	and	@0,w
                                 	.endmacro	
                                 .macro	ORMSK	; reg1,reg2,mask	; reg1 <- ret 1 AND reg2 (mask)		
                                 	mov	w,@1
                                 	andi	w,@2
                                 	or	@0,w
                                 	.endmacro
                                 	
                                 ; --- logical operations on bits ---
                                 .macro	ANDB	; r1,b1, r2,b2, r3,b3	; reg1,b1 <- reg2,b2 AND reg3,b3
                                 	set
                                 	sbrs	@4,@5	
                                 	clt
                                 	sbrs	@2,@3	
                                 	clt
                                 	bld	@0,@1
                                 	.endmacro
                                 .macro	ORB	; r1,b1, r2,b2, r3,b3	; reg1.b1 <- reg2.b2 OR reg3.b3
                                 	clt
                                 	sbrc	@4,@5	
                                 	set
                                 	sbrc	@2,@3	
                                 	set
                                 	bld	@0,@1
                                 	.endmacro
                                 .macro	EORB	; r1,b1, r2,b2, r3,b3	; reg1.b1 <- reg2.b2 XOR reg3.b3
                                 	sbrc	@4,@5
                                 	rjmp	f1
                                 f0:	bst	@2,@3	
                                 	rjmp	PC+4
                                 f1:	set
                                 	sbrc	@0,@1
                                 	clt
                                 	bld	@0,@0	
                                 	.endmacro
                                 	
                                 ; --- operations based on register bits ---
                                 .macro	FB0	; reg,bit		; bit=0
                                 	cbr	@0,1<<@1
                                 	.endmacro
                                 .macro	FB1	; reg,bit		; bit=1
                                 	sbr	@0,1<<@1
                                 	.endmacro
                                 .macro	_FB0	; reg,bit		; bit=0
                                 	ldi	w,~(1<<@1)
                                 	and	@0,w
                                 	.endmacro
                                 .macro	_FB1	; reg,bit		; bit=1
                                 	ldi	w,1<<@1
                                 	or	@0,w
                                 	.endmacro
                                 .macro	SB0	; reg,bit,addr		; skip if bit=0
                                 	sbrc	@0,@1
                                 	.endmacro
                                 .macro	SB1	; reg,bit,addr		; skip if bit=1
                                 	sbrs	@0,@1
                                 	.endmacro
                                 .macro	JB0	; reg,bit,addr		; jump if bit=0
                                 	sbrs	@0,@1
                                 	rjmp	@2
                                 	.endmacro
                                 .macro	JB1	; reg,bit,addr		; jump if bit=1
                                 	sbrc	@0,@1
                                 	rjmp	@2
                                 	.endmacro
                                 .macro	CB0	; reg,bit,addr		; call if bit=0
                                 	sbrs	@0,@1
                                 	rcall	@2
                                 	.endmacro
                                 .macro	CB1	; reg,bit,addr		; call if bit=1
                                 	sbrc	@0,@1
                                 	rcall	@2
                                 	.endmacro
                                 .macro	WB0	; reg,bit		; wait if bit=0
                                 	sbrs	@0,@1
                                 	rjmp	PC-1
                                 	.endmacro
                                 .macro	WB1	; reg,bit		; wait if bit=1
                                 	sbrc	@0,@1
                                 	rjmp	PC-1
                                 	.endmacro
                                 .macro	RB0	; reg,bit		; return if bit=0
                                 	sbrs	@0,@1
                                 	ret
                                 	.endmacro
                                 .macro	RB1	; reg,bit		; return if bit=1
                                 	sbrc	@0,@1
                                 	ret
                                 	.endmacro
                                 
                                 ; wait if bit=0 with timeout
                                 ; if timeout (in units of 5 cyc) then jump to addr
                                 .macro	WB0T	; reg,bit,timeout,addr
                                 	ldi	w,@2+1
                                 	dec	w	; 1 cyc
                                 	breq	@3	; 1 cyc
                                 	sbrs	@0,@1	; 1 cyc
                                 	rjmp	PC-3	; 2 cyc = 5 cycles
                                 	.endmacro
                                 
                                 ; wait if bit=1 with timeout
                                 ; if timeout (in units of 5 cyc) then jump to addr	
                                 .macro	WB1T	; reg,bit,timeout,addr
                                 	ldi	w,@2+1
                                 	dec	w	; 1 cyc
                                 	breq	@3	; 1 cyc
                                 	sbrc	@0,@1	; 1 cyc
                                 	rjmp	PC-3	; 2 cyc = 5 cycles
                                 	.endmacro	
                                 	
                                 ; --- operations based on port bits ---
                                 .macro	P0	; port,bit		; port=0
                                 	cbi	@0,@1
                                 	.endmacro
                                 .macro	P1	; port,bit		; port=1
                                 	sbi	@0,@1
                                 	.endmacro
                                 .macro	SP0	; port,bit		; skip if port=0
                                 	sbic	@0,@1
                                 	.endmacro
                                 .macro	SP1	; port,bit		; skip if port=1
                                 	sbis	@0,@1
                                 	.endmacro
                                 .macro	JP0	; port,bit,addr		; jump if port=0
                                 	sbis	@0,@1
                                 	rjmp	@2
                                 	.endmacro
                                 .macro	JP1	; port,bit,addr		; jump if port=1
                                 	sbic	@0,@1
                                 	rjmp	@2
                                 	.endmacro
                                 .macro	CP0	; port,bit,addr		; call if port=0
                                 	sbis	@0,@1
                                 	rcall	@2
                                 	.endmacro
                                 .macro	CP1	; port,bit,addr		; call if port=1
                                 	sbic	@0,@1
                                 	rcall	@2
                                 	.endmacro
                                 .macro	WP0	; port,bit		; wait if port=0
                                 	sbis	@0,@1
                                 	rjmp	PC-1
                                 	.endmacro
                                 .macro	WP1	; port,bit		; wait if port=1
                                 	sbic	@0,@1
                                 	rjmp	PC-1
                                 	.endmacro
                                 .macro	RP0	; port,bit		; return if port=0
                                 	sbis	@0,@1
                                 	ret
                                 	.endmacro
                                 .macro	RP1	; port,bit		; return if port=1
                                 	sbic	@0,@1
                                 	ret
                                 	.endmacro
                                 
                                 ; wait if port=0 with timeout
                                 ; if timeout (in units of 5 cyc) then jump to addr
                                 .macro	WP0T	; port,bit,timeout,addr
                                 	ldi	w,@2+1
                                 	dec	w	; 1 cyc
                                 	breq	@3	; 1 cyc
                                 	sbis	@0,@1	; 1 cyc
                                 	rjmp	PC-3	; 2 cyc = 5 cycles
                                 	.endmacro
                                 
                                 ; wait if port=1 with timeout
                                 ; if timeout (in units of 5 cyc) then jump to addr	
                                 .macro	WP1T	; port,bit,timeout,addr
                                 	ldi	w,@2+1
                                 	dec	w	; 1 cyc
                                 	breq	@3	; 1 cyc
                                 	sbic	@0,@1	; 1 cyc
                                 	rjmp	PC-3	; 2 cyc = 5 cycles
                                 	.endmacro	
                                 
                                 ; ===========================
                                 ; 	multi-byte operations
                                 ; ===========================
                                 
                                 .macro	SWAP4			; swap 2 variables
                                 	mov	w ,@0
                                 	mov	@0,@4
                                 	mov	@4,w
                                 	mov	w ,@1
                                 	mov	@1,@5
                                 	mov	@5,w
                                 	mov	w ,@2
                                 	mov	@2,@6
                                 	mov	@6,w
                                 	mov	w ,@3
                                 	mov	@3,@7
                                 	mov	@7,w
                                 	.endmacro
                                 .macro	SWAP3
                                 	mov	w ,@0
                                 	mov	@0,@3
                                 	mov	@3,w
                                 	mov	w ,@1
                                 	mov	@1,@4
                                 	mov	@4,w
                                 	mov	w ,@2
                                 	mov	@2,@5
                                 	mov	@5,w
                                 	.endmacro
                                 .macro	SWAP2
                                 	mov	w ,@0
                                 	mov	@0,@2
                                 	mov	@2,w
                                 	mov	w ,@1
                                 	mov	@1,@3
                                 	mov	@3,w
                                 	.endmacro
                                 .macro	SWAP1
                                 	mov	w ,@0
                                 	mov	@0,@1
                                 	mov	@1,w
                                 	.endmacro
                                 
                                 .macro	LDX4	;r..r0		; load from (x+)
                                 	ld	@3,x+
                                 	ld	@2,x+	
                                 	ld	@1,x+
                                 	ld	@0,x+
                                 	.endmacro
                                 .macro	LDX3	;r..r0
                                 	ld	@2,x+	
                                 	ld	@1,x+
                                 	ld	@0,x+
                                 	.endmacro
                                 .macro	LDX2	;r..r0	
                                 	ld	@1,x+
                                 	ld	@0,x+
                                 	.endmacro
                                 	
                                 .macro	LDY4	;r..r0		; load from (y+)
                                 	ld	@3,y+
                                 	ld	@2,y+	
                                 	ld	@1,y+
                                 	ld	@0,y+
                                 	.endmacro
                                 .macro	LDY3	;r..r0
                                 	ld	@2,y+	
                                 	ld	@1,y+
                                 	ld	@0,y+
                                 	.endmacro
                                 .macro	LDY2	;r..r0	
                                 	ld	@1,y+
                                 	ld	@0,y+
                                 	.endmacro
                                 
                                 .macro	LDZ4	;r..r0		; load from (z+)
                                 	ld	@3,z+
                                 	ld	@2,z+	
                                 	ld	@1,z+
                                 	ld	@0,z+
                                 	.endmacro
                                 .macro	LDZ3	;r..r0
                                 	ld	@2,z+	
                                 	ld	@1,z+
                                 	ld	@0,z+
                                 	.endmacro
                                 .macro	LDZ2	;r..r0
                                 	ld	@1,z+
                                 	ld	@0,z+
                                 	.endmacro
                                 
                                 .macro	STX4	;r..r0		; store to (x+)
                                 	st	x+,@3
                                 	st	x+,@2	
                                 	st	x+,@1
                                 	st	x+,@0
                                 	.endmacro
                                 .macro	STX3	;r..r0
                                 	st	x+,@2	
                                 	st	x+,@1
                                 	st	x+,@0
                                 	.endmacro
                                 .macro	STX2	;r..r0
                                 	st	x+,@1
                                 	st	x+,@0
                                 	.endmacro
                                 	
                                 .macro	STY4	;r..r0		; store to (y+)
                                 	st	y+,@3
                                 	st	y+,@2	
                                 	st	y+,@1
                                 	st	y+,@0
                                 	.endmacro
                                 .macro	STY3	;r..r0
                                 	st	y+,@2	
                                 	st	y+,@1
                                 	st	y+,@0
                                 	.endmacro
                                 .macro	STY2	;r..r0	
                                 	st	y+,@1
                                 	st	y+,@0
                                 	.endmacro
                                 	
                                 .macro	STZ4	;r..r0		; store to (z+)
                                 	st	z+,@3
                                 	st	z+,@2	
                                 	st	z+,@1
                                 	st	z+,@0
                                 	.endmacro	
                                 .macro	STZ3	;r..r0
                                 	st	z+,@2	
                                 	st	z+,@1
                                 	st	z+,@0
                                 	.endmacro	
                                 .macro	STZ2	;r..r0	
                                 	st	z+,@1
                                 	st	z+,@0
                                 	.endmacro	
                                 	
                                 .macro	STI4	;addr,k		; store immediate
                                 	ldi	w,  low(@1)
                                 	sts	@0+0,w
                                 	ldi	w, high(@1)
                                 	sts	@0+1,w
                                 	ldi	w,byte3(@1)
                                 	sts	@0+2,w
                                 	ldi	w,byte4(@1)
                                 	sts	@0+3,w	
                                 	.endmacro	
                                 .macro	STI3	;addr,k
                                 	ldi	w,  low(@1)
                                 	sts	@0+0,w
                                 	ldi	w, high(@1)
                                 	sts	@0+1,w
                                 	ldi	w,byte3(@1)
                                 	sts	@0+2,w
                                 	.endmacro	
                                 .macro	STI2	;addr,k
                                 	ldi	w,  low(@1)
                                 	sts	@0+0,w
                                 	ldi	w, high(@1)
                                 	sts	@0+1,w
                                 	.endmacro
                                 .macro	STI	;addr,k
                                 	ldi	w,@1
                                 	sts	@0,w
                                 	.endmacro
                                 
                                 .macro	INC4			; increment
                                 	ldi	w,0xff
                                 	sub	@3,w
                                 	sbc	@2,w
                                 	sbc	@1,w
                                 	sbc	@0,w
                                 	.endmacro
                                 .macro	INC3
                                 	ldi	w,0xff
                                 	sub	@2,w
                                 	sbc	@1,w
                                 	sbc	@0,w
                                 	.endmacro
                                 .macro	INC2
                                 	ldi	w,0xff
                                 	sub	@1,w
                                 	sbc	@0,w
                                 	.endmacro
                                 
                                 .macro	DEC4			; decrement
                                 	ldi	w,0xff
                                 	add	@3,w
                                 	adc	@2,w
                                 	adc	@1,w
                                 	adc	@0,w
                                 	.endmacro
                                 .macro	DEC3
                                 	ldi	w,0xff
                                 	add	@2,w
                                 	adc	@1,w
                                 	adc	@0,w
                                 	.endmacro
                                 .macro	DEC2
                                 	ldi	w,0xff
                                 	add	@1,w
                                 	adc	@0,w
                                 	.endmacro
                                 
                                 .macro	CLR9			; clear (also clears the carry)
                                 	sub	@0,@0
                                 	clr	@1
                                 	clr	@2
                                 	clr	@3
                                 	clr	@4
                                 	clr	@5
                                 	clr	@6
                                 	clr	@7
                                 	clr	@8
                                 	.endmacro
                                 .macro	CLR8
                                 	sub	@0,@0
                                 	clr	@1
                                 	clr	@2
                                 	clr	@3
                                 	clr	@4
                                 	clr	@5
                                 	clr	@6
                                 	clr	@7
                                 	.endmacro
                                 .macro	CLR7
                                 	sub	@0,@0
                                 	clr	@1
                                 	clr	@2
                                 	clr	@3
                                 	clr	@4
                                 	clr	@5
                                 	clr	@6
                                 	.endmacro
                                 .macro	CLR6
                                 	sub	@0,@0
                                 	clr	@1
                                 	clr	@2
                                 	clr	@3
                                 	clr	@4
                                 	clr	@5
                                 	.endmacro
                                 .macro	CLR5
                                 	sub	@0,@0
                                 	clr	@1
                                 	clr	@2
                                 	clr	@3
                                 	clr	@4
                                 	.endmacro
                                 .macro	CLR4
                                 	sub	@0,@0
                                 	clr	@1
                                 	clr	@2
                                 	clr	@3
                                 	.endmacro
                                 .macro	CLR3
                                 	sub	@0,@0
                                 	clr	@1
                                 	clr	@2
                                 	.endmacro
                                 .macro	CLR2
                                 	sub	@0,@0
                                 	clr	@1
                                 	.endmacro
                                 
                                 .macro	COM4			; one's complement
                                 	com	@0
                                 	com	@1
                                 	com	@2
                                 	com	@3
                                 	.endmacro
                                 .macro	COM3
                                 	com	@0
                                 	com	@1
                                 	com	@2
                                 	.endmacro
                                 .macro	COM2
                                 	com	@0
                                 	com	@1
                                 	.endmacro
                                 
                                 .macro	NEG4			; negation (two's complement)
                                 	com	@0
                                 	com	@1
                                 	com	@2
                                 	com	@3
                                 	ldi	w,0xff
                                 	sub	@3,w
                                 	sbc	@2,w
                                 	sbc	@1,w
                                 	sbc	@0,w
                                 	.endmacro
                                 .macro	NEG3
                                 	com	@0
                                 	com	@1
                                 	com	@2
                                 	ldi	w,0xff
                                 	sub	@2,w
                                 	sbc	@1,w
                                 	sbc	@0,w
                                 	.endmacro
                                 .macro	NEG2
                                 	com	@0
                                 	com	@1
                                 	ldi	w,0xff
                                 	sub	@1,w
                                 	sbc	@0,w
                                 	.endmacro
                                 	
                                 .macro	LDI4 	; r..r0, k	; load immediate
                                 	ldi	@3,  low(@4)
                                 	ldi	@2, high(@4)
                                 	ldi	@1,byte3(@4)
                                 	ldi	@0,byte4(@4)
                                 	.endmacro
                                 .macro	LDI3
                                 	ldi	@2,  low(@3)
                                 	ldi	@1, high(@3)
                                 	ldi	@0,byte3(@3)
                                 	.endmacro
                                 .macro	LDI2
                                 	ldi	@1,  low(@2)
                                 	ldi	@0, high(@2)
                                 	.endmacro
                                 
                                 .macro	LDS4			; load direct from SRAM
                                 	lds	@3,@4
                                 	lds	@2,@4+1
                                 	lds	@1,@4+2
                                 	lds	@0,@4+3
                                 	.endmacro
                                 .macro	LDS3
                                 	lds	@2,@3
                                 	lds	@1,@3+1
                                 	lds	@0,@3+2
                                 	.endmacro
                                 .macro	LDS2
                                 	lds	@1,@2
                                 	lds	@0,@2+1
                                 	.endmacro
                                 
                                 .macro	STS4			; store direct to SRAM
                                 	sts	@0+0,@4
                                 	sts	@0+1,@3
                                 	sts	@0+2,@2
                                 	sts	@0+3,@1
                                 	.endmacro
                                 .macro	STS3
                                 	sts	@0+0,@3
                                 	sts	@0+1,@2
                                 	sts	@0+2,@1
                                 	.endmacro
                                 .macro	STS2
                                 	sts	@0+0,@2
                                 	sts	@0+1,@1
                                 	.endmacro
                                 
                                 .macro	STDZ4	; d, r3,r2,r1,r0
                                 	std	z+@0+0,@4
                                 	std	z+@0+1,@3
                                 	std	z+@0+2,@2
                                 	std	z+@0+3,@1
                                 	.endmacro
                                 .macro	STDZ3	; d, r2,r1,r0
                                 	std	z+@0+0,@3
                                 	std	z+@0+1,@2
                                 	std	z+@0+2,@1
                                 	.endmacro
                                 .macro	STDZ2	; d, r1,r0
                                 	std	z+@0+0,@2
                                 	std	z+@0+1,@1
                                 	.endmacro
                                 	
                                 .macro	LPM4			; load program memory
                                 	lpm
                                 	mov	@3,r0
                                 	adiw	zl,1
                                 	lpm
                                 	mov	@2,r0
                                 	adiw	zl,1
                                 	lpm
                                 	mov	@1,r0
                                 	adiw	zl,1
                                 	lpm
                                 	mov	@0,r0
                                 	adiw	zl,1
                                 	.endmacro
                                 .macro	LPM3
                                 	lpm
                                 	mov	@2,r0
                                 	adiw	zl,1
                                 	lpm
                                 	mov	@1,r0
                                 	adiw	zl,1
                                 	lpm
                                 	mov	@0,r0
                                 	adiw	zl,1
                                 	.endmacro
                                 .macro	LPM2
                                 	lpm
                                 	mov	@1,r0
                                 	adiw	zl,1
                                 	lpm
                                 	mov	@0,r0
                                 	adiw	zl,1
                                 	.endmacro
                                 .macro	LPM1
                                 	lpm
                                 	mov	@0,r0
                                 	adiw	zl,1
                                 	.endmacro
                                 
                                 .macro	MOV4			; move between registers
                                 	mov	@3,@7
                                 	mov	@2,@6
                                 	mov	@1,@5
                                 	mov	@0,@4
                                 	.endmacro
                                 .macro	MOV3
                                 	mov	@2,@5
                                 	mov	@1,@4
                                 	mov	@0,@3
                                 	.endmacro
                                 .macro	MOV2
                                 	mov	@1,@3
                                 	mov	@0,@2
                                 	.endmacro
                                 
                                 .macro	ADD4			; add
                                 	add	@3,@7
                                 	adc	@2,@6
                                 	adc	@1,@5
                                 	adc	@0,@4
                                 	.endmacro
                                 .macro	ADD3
                                 	add	@2,@5
                                 	adc	@1,@4
                                 	adc	@0,@3
                                 	.endmacro
                                 .macro	ADD2
                                 	add	@1,@3
                                 	adc	@0,@2
                                 	.endmacro
                                 
                                 .macro	SUB4			; subtract
                                 	sub	@3,@7
                                 	sbc	@2,@6
                                 	sbc	@1,@5
                                 	sbc	@0,@4
                                 	.endmacro
                                 .macro	SUB3
                                 	sub	@2,@5
                                 	sbc	@1,@4
                                 	sbc	@0,@3
                                 	.endmacro
                                 .macro	SUB2
                                 	sub	@1,@3
                                 	sbc	@0,@2
                                 	.endmacro
                                 	
                                 .macro	CP4			; compare
                                 	cp	@3,@7
                                 	cpc	@2,@6
                                 	cpc	@1,@5
                                 	cpc	@0,@4
                                 	.endmacro
                                 .macro	CP3
                                 	cp	@2,@5
                                 	cpc	@1,@4
                                 	cpc	@0,@3
                                 	.endmacro
                                 .macro	CP2
                                 	cp	@1,@3
                                 	cpc	@0,@2
                                 	.endmacro
                                 
                                 .macro	TST4			; test
                                 	clr	w
                                 	cp	@3,w
                                 	cpc	@2,w
                                 	cpc	@1,w
                                 	cpc	@0,w
                                 	.endmacro
                                 .macro	TST3
                                 	clr	w
                                 	cp	@2,w
                                 	cpc	@1,w
                                 	cpc	@0,w
                                 	.endmacro
                                 .macro	TST2
                                 	clr	w
                                 	cp	@1,w
                                 	cpc	@0,w
                                 	.endmacro
                                 
                                 .macro	ADDI4			; add immediate
                                 	subi	@3,  low(-@4)
                                 	sbci	@2, high(-@4)
                                 	sbci	@1,byte3(-@4)
                                 	sbci	@0,byte4(-@4)
                                 	.endmacro
                                 .macro	ADDI3
                                 	subi	@2,  low(-@3)
                                 	sbci	@1, high(-@3)
                                 	sbci	@0,byte3(-@3)
                                 	.endmacro
                                 .macro	ADDI2
                                 	subi	@1,  low(-@2)
                                 	sbci	@0, high(-@2)
                                 	.endmacro
                                 	
                                 .macro	SUBI4			; subtract immediate
                                 	subi	@3,  low(@4)
                                 	sbci	@2, high(@4)
                                 	sbci	@1,byte3(@4)
                                 	sbci	@0,byte4(@4)
                                 	.endmacro
                                 .macro	SUBI3
                                 	subi	@2,  low(@3)
                                 	sbci	@1, high(@3)
                                 	sbci	@0,byte3(@3)
                                 	.endmacro
                                 .macro	SUBI2
                                 	subi	@1,  low(@2)
                                 	sbci	@0, high(@2)
                                 	.endmacro
                                 
                                 .macro	LSL5			; logical shift left
                                 	lsl	@4
                                 	rol	@3
                                 	rol	@2
                                 	rol	@1
                                 	rol	@0
                                 	.endmacro
                                 .macro	LSL4
                                 	lsl	@3
                                 	rol	@2
                                 	rol	@1
                                 	rol	@0
                                 	.endmacro
                                 .macro	LSL3
                                 	lsl	@2
                                 	rol	@1
                                 	rol	@0
                                 	.endmacro
                                 .macro	LSL2
                                 	lsl	@1
                                 	rol	@0
                                 	.endmacro
                                 	
                                 .macro	LSR4			; logical shift right
                                 	lsr	@0
                                 	ror	@1
                                 	ror	@2
                                 	ror	@3
                                 	.endmacro
                                 .macro	LSR3
                                 	lsr	@0
                                 	ror	@1
                                 	ror	@2
                                 	.endmacro
                                 .macro	LSR2
                                 	lsr	@0
                                 	ror	@1
                                 	.endmacro
                                 
                                 .macro	ASR4			; arithmetic shift right
                                 	asr	@0
                                 	ror	@1
                                 	ror	@2
                                 	ror	@3
                                 	.endmacro
                                 .macro	ASR3
                                 	asr	@0
                                 	ror	@1
                                 	ror	@2
                                 	.endmacro
                                 .macro	ASR2
                                 	asr	@0
                                 	ror	@1
                                 	.endmacro
                                 
                                 .macro	ROL8			; rotate left through carry
                                 	rol	@7
                                 	rol	@6
                                 	rol	@5
                                 	rol	@4
                                 	rol	@3
                                 	rol	@2
                                 	rol	@1
                                 	rol	@0
                                 	.endmacro
                                 .macro	ROL7
                                 	rol	@6
                                 	rol	@5
                                 	rol	@4
                                 	rol	@3
                                 	rol	@2
                                 	rol	@1
                                 	rol	@0
                                 	.endmacro
                                 .macro	ROL6
                                 	rol	@5
                                 	rol	@4
                                 	rol	@3
                                 	rol	@2
                                 	rol	@1
                                 	rol	@0
                                 	.endmacro
                                 .macro	ROL5
                                 	rol	@4
                                 	rol	@3
                                 	rol	@2
                                 	rol	@1
                                 	rol	@0
                                 	.endmacro
                                 .macro	ROL4
                                 	rol	@3
                                 	rol	@2
                                 	rol	@1
                                 	rol	@0
                                 	.endmacro
                                 .macro	ROL3
                                 	rol	@2
                                 	rol	@1
                                 	rol	@0
                                 	.endmacro
                                 .macro	ROL2
                                 	rol	@1
                                 	rol	@0
                                 	.endmacro
                                 
                                 .macro	ROR8			; rotate right through carry
                                 	ror	@0
                                 	ror	@1
                                 	ror	@2
                                 	ror	@3
                                 	ror	@4
                                 	ror	@5
                                 	ror	@6
                                 	ror	@7
                                 	.endmacro
                                 .macro	ROR7
                                 	ror	@0
                                 	ror	@1
                                 	ror	@2
                                 	ror	@3
                                 	ror	@4
                                 	ror	@5
                                 	ror	@6
                                 	.endmacro
                                 .macro	ROR6
                                 	ror	@0
                                 	ror	@1
                                 	ror	@2
                                 	ror	@3
                                 	ror	@4
                                 	ror	@5
                                 	.endmacro
                                 .macro	ROR5
                                 	ror	@0
                                 	ror	@1
                                 	ror	@2
                                 	ror	@3
                                 	ror	@4
                                 	.endmacro	
                                 .macro	ROR4
                                 	ror	@0
                                 	ror	@1
                                 	ror	@2
                                 	ror	@3
                                 	.endmacro
                                 .macro	ROR3
                                 	ror	@0
                                 	ror	@1
                                 	ror	@2
                                 	.endmacro
                                 .macro	ROR2
                                 	ror	@0
                                 	ror	@1
                                 	.endmacro
                                 
                                 .macro	PUSH2
                                 	push	@0
                                 	push	@1
                                 	.endmacro	
                                 .macro	POP2
                                 	pop	@1
                                 	pop	@0
                                 	.endmacro
                                 
                                 .macro	PUSH3
                                 	push	@0
                                 	push	@1
                                 	push	@2
                                 	.endmacro	
                                 .macro	POP3
                                 	pop	@2
                                 	pop	@1
                                 	pop	@0
                                 	.endmacro
                                 	
                                 .macro	PUSH4
                                 	push	@0
                                 	push	@1
                                 	push	@2
                                 	push	@3
                                 	.endmacro	
                                 .macro	POP4
                                 	pop	@3
                                 	pop	@2
                                 	pop	@1
                                 	pop	@0
                                 	.endmacro	
                                 	
                                 .macro	PUSH5
                                 	push	@0
                                 	push	@1
                                 	push	@2
                                 	push	@3
                                 	push	@4
                                 	.endmacro	
                                 .macro	POP5
                                 	pop	@4
                                 	pop	@3
                                 	pop	@2
                                 	pop	@1
                                 	pop	@0
                                 	.endmacro	
                                 
                                 ; --- SRAM operations ---
                                 .macro	INCS4	; sram		; increment SRAM 4-byte variable
                                 	lds	w,@0
                                 	inc	w
                                 	sts	@0,w
                                 	brne	end
                                 	lds	w,@0+1
                                 	inc	w
                                 	sts	@0+1,w
                                 	brne	end
                                 	lds	w,@0+2
                                 	inc	w
                                 	sts	@0+2,w
                                 	brne	end
                                 	lds	w,@0+3
                                 	inc	w
                                 	sts	@0+3,w
                                 end:	
                                 	.endmacro
                                 
                                 .macro	INCS3	; sram		; increment SRAM 3-byte variable
                                 	lds	w,@0
                                 	inc	w
                                 	sts	@0,w
                                 	brne	end
                                 	lds	w,@0+1
                                 	inc	w
                                 	sts	@0+1,w
                                 	brne	end
                                 	lds	w,@0+2
                                 	inc	w
                                 	sts	@0+2,w
                                 end:	
                                 	.endmacro
                                 
                                 .macro	INCS2	; sram		; increment SRAM 2-byte variable
                                 	lds	w,@0
                                 	inc	w
                                 	sts	@0,w
                                 	brne	end
                                 	lds	w,@0+1
                                 	inc	w
                                 	sts	@0+1,w
                                 end:	
                                 	.endmacro
                                 
                                 .macro	INCS	; sram		; increment SRAM 1-byte variable
                                 	lds	w,@0
                                 	inc	w
                                 	sts	@0,w
                                 	.endmacro
                                 
                                 .macro	DECS4	; sram		; decrement SRAM 4-byte variable
                                 	ldi	w,1
                                 	lds	u,@0
                                 	sub	u,w
                                 	sts	@0,u
                                 	clr	w
                                 	lds	u,@0+1
                                 	sbc	u,w
                                 	sts	@0+1,u
                                 	lds	u,@0+2
                                 	sbc	u,w
                                 	sts	@0+2,u
                                 	lds	u,@0+3
                                 	sbc	u,w
                                 	sts	@0+3,u
                                 	.endmacro
                                 .macro	DECS3	; sram		; decrement SRAM 3-byte variable
                                 	ldi	w,1
                                 	lds	u,@0
                                 	sub	u,w
                                 	sts	@0,u
                                 	clr	w
                                 	lds	u,@0+1
                                 	sbc	u,w
                                 	sts	@0+1,u
                                 	lds	u,@0+2
                                 	sbc	u,w
                                 	sts	@0+2,u
                                 	.endmacro
                                 .macro	DECS2	; sram		; decrement SRAM 2-byte variable
                                 	ldi	w,1
                                 	lds	u,@0
                                 	sub	u,w
                                 	sts	@0,u
                                 	clr	w
                                 	lds	u,@0+1
                                 	sbc	u,w
                                 	sts	@0+1,u
                                 	.endmacro
                                 .macro	DECS	; sram		; decrement
                                 	lds	w,@0
                                 	dec	w
                                 	sts	@0,w
                                 	.endmacro
                                 
                                 .macro	MOVS4	; addr0,addr1	; [addr0] <-- [addr1]
                                 	lds	w,@1
                                 	sts	@0,w
                                 	lds	w,@1+1
                                 	sts	@0+1,w
                                 	lds	w,@1+2
                                 	sts	@0+2,w
                                 	lds	w,@3+1
                                 	sts	@0+3,w	
                                 	.endmacro
                                 .macro	MOVS3	; addr0,addr1	; [addr0] <-- [addr1]
                                 	lds	w,@1
                                 	sts	@0,w
                                 	lds	w,@1+1
                                 	sts	@0+1,w
                                 	lds	w,@1+2
                                 	sts	@0+2,w
                                 	.endmacro
                                 .macro	MOVS2	; addr0,addr1	; [addr0] <-- [addr1]
                                 	lds	w,@1
                                 	sts	@0,w
                                 	lds	w,@1+1
                                 	sts	@0+1,w
                                 	.endmacro
                                 .macro	MOVS	; addr0,addr1	; [addr0] <-- [addr1]
                                 	lds	w,@1
                                 	sts	@0,w
                                 	.endmacro
                                 
                                 .macro	SEXT	; reg1,reg0	; sign extend
                                 	clr	@0
                                 	sbrc	@1,7
                                 	dec	@0
                                 	.endmacro
                                 
                                 ; =======================================
                                 ;	Jump/Call with constant arguments
                                 ; =======================================
                                 	
                                 ; --- calls with arguments a,b,XYZ ---
                                 .macro	CX	; subroutine,x
                                 	ldi	xl, low(@1)
                                 	ldi	xh,high(@1)
                                 	rcall	@0
                                 	.endmacro
                                 .macro	CXY	; subroutine,x,y
                                 	ldi	xl, low(@1)
                                 	ldi	xh,high(@1)
                                 	ldi	yl, low(@2)
                                 	ldi	yh,high(@2)	
                                 	rcall	@0
                                 	.endmacro		
                                 .macro	CXZ	; subroutine,x,z
                                 	ldi	xl, low(@1)
                                 	ldi	xh,high(@1)
                                 	ldi	zl, low(@2)
                                 	ldi	zh,high(@2)	
                                 	rcall	@0
                                 	.endmacro		
                                 .macro	CXYZ	; subroutine,x,y,z
                                 	ldi	xl, low(@1)
                                 	ldi	xh,high(@1)
                                 	ldi	yl, low(@2)
                                 	ldi	yh,high(@2)
                                 	ldi	zl, low(@3)
                                 	ldi	zh,high(@3)		
                                 	rcall	@0
                                 	.endmacro
                                 .macro	CW	; subroutine,w
                                 	ldi	w, @1
                                 	rcall	@0
                                 	.endmacro
                                 .macro	CA	; subroutine,a
                                 	ldi	a0, @1
                                 	rcall	@0
                                 	.endmacro
                                 .macro	CAB	; subroutine,a,b
                                 	ldi	a0, @1
                                 	ldi	b0, @2
                                 	rcall	@0
                                 	.endmacro
                                 
                                 ; --- jump with arguments w,a,b ---
                                 .macro	JW	; subroutine,w
                                 	ldi	w, @1
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	JA	; subroutine,a
                                 	ldi	a0, @1
                                 	rjmp	@0
                                 	.endmacro
                                 .macro	JAB	; subroutine,a,b
                                 	ldi	a0, @1
                                 	ldi	b0, @2
                                 	rjmp	@0
                                 	.endmacro
                                 .list
                                 		
                                 ; === interrupt table ===
                                 
                                 .org 0
000000 940c 0d22                 	jmp	reset
                                 
                                 .org INT0addr
000002 b61f                      	in _sreg, SREG						;L'interruption 0 permet le déplacement latéral du personnage
000003 940c 0d1d                 	jmp ext_int0
                                 
                                 .org OVF0addr
000020 b61f                      	in _sreg, SREG						;L'interruption de timer overflow 0 permet de limiter la durée d'une partie à 60 secondes
000021 940c 0d1f                 	jmp ovf_int0
                                 
                                 .include "macros_map.asm"
                                 
                                  * macros_map.asm
                                  *
                                  *  Created: 08/05/2022 16:27:24
                                  *   Author: patri
                                  */ 
                                 ;==================================================================================================================================================================================================================
                                 ;==================================================================================================================================================================================================================
                                 ;==================================================================================================================================================================================================================
                                 ;==================================================================================================================================================================================================================
                                  ; WS2812b4_WR0	; macro ; arg: void; used: void
                                 ; purpose: write an active-high zero-pulse to PD1
                                 .macro	WS2812b4_WR0
                                 	clr u
                                 	sbi PORTE, 1
                                 	out PORTE, u
                                 	nop
                                 	nop
                                 	;nop	;deactivated on purpose of respecting timings
                                 	;nop
                                 .endm
                                 ;==================================================================================================================================================================================================================
                                 ;==================================================================================================================================================================================================================
                                 ; WS2812b4_WR1	; macro ; arg: void; used: void
                                 ; purpose: write an active-high one-pulse to PD1
                                 .macro	WS2812b4_WR1
                                 	sbi PORTE, 1
                                 	nop
                                 	nop
                                 	cbi PORTE, 1
                                 	;nop	;deactivated on purpose of respecting timings
                                 	;nop
                                 .endm
                                 ;==================================================================================================================================================================================================================
                                 ;==================================================================================================================================================================================================================
                                 ; ORANGE	; macro ; arg: @0=a0; used: z
                                 ; but: remplir 3 cases mémoires pour obtenir une LED orange lors de l'affichage
                                  .macro ORANGE
                                 	ldi	@0, 0x06	; pixel , orange
                                 	st	z+,@0
                                 	ldi @0,0x1c
                                 	st	z+,@0
                                 	ldi	@0, 0x00
                                 	st z+,@0
                                 .endmacro
                                 ;==================================================================================================================================================================================================================
                                 ;==================================================================================================================================================================================================================
                                 ; VERT	; macro ; arg: @0=a0; used: z
                                 ; but: remplir 3 cases mémoires pour obtenir une LED verte lors de l'affichage
                                 .macro VERT
                                 	ldi	@0, 0x1c	; pixel , vert
                                 	st	z+,@0
                                 	ldi @0,0x00
                                 	st	z+,@0
                                 	ldi	@0, 0x00
                                 	st z+,@0
                                 .endmacro
                                 ;==================================================================================================================================================================================================================
                                 ;==================================================================================================================================================================================================================
                                 ; VOID	; macro ; arg: @0=a0; used: z
                                 ; but: remplir 3 cases mémoires pour obtenir une LED éteinte lors de l'affichage
                                 .macro VOID
                                 	ldi	@0, 0x00	; pixel , vide
                                 	st	z+,@0
                                 	ldi @0,0x00
                                 	st	z+,@0
                                 	ldi	@0, 0x00
                                 	st z+,@0
                                 .endmacro
                                 ;==================================================================================================================================================================================================================
                                 ;==================================================================================================================================================================================================================
                                 ; PURPLE	; macro ; arg: @0=a0; used: z
                                 ; but: remplir 3 cases mémoires pour obtenir une LED violette lors de l'affichage
                                 .macro PURPLE
                                 	ldi	@0, 0x00	; pixel , violet
                                 	st	z+,@0
                                 	ldi @0,0x06
                                 	st	z+,@0
                                 	ldi	@0, 0x06
                                 	st z+,@0
                                 .endmacro
                                 ;==================================================================================================================================================================================================================
                                 ;==================================================================================================================================================================================================================
                                 ; COLONNE1	; macro ; arg: @0=a0, @1 et @2 sont des constantes; used: w
                                 ; but: remplir 24 cases mémoires pour afficher une colonne sur la matrice, colonnes modulables selon les constantes
                                 ;COLONNEx, le x représente le nombre de changements de couleur dans la colonne 
                                 .macro COLONNE1
                                 	ldi w, @1
                                 	loop_base:
                                 		ORANGE @0
                                 		dec w
                                 		brne loop_base
                                 	ldi w, @2
                                 	loop_base0:
                                 		VOID @0
                                 		dec w
                                 		brne loop_base0
                                 .endmacro
                                 ;==================================================================================================================================================================================================================
                                 ;==================================================================================================================================================================================================================
                                 ; COLONNE1_START	; macro ; arg: @0=a0, @1 et @2 sont des constantes; used: w
                                 ; but: remplir 24 cases mémoires pour afficher une colonne sur la matrice, colonnes modulables selon les constantes
                                 ;	   de plus, la colonne comporte une LED verte pour le personnage
                                 .macro COLONNE1_START
                                 	ldi w, @1
                                 	loop_base:
                                 		ORANGE @0
                                 		dec w
                                 		brne loop_base
                                 	VERT @0
                                 	ldi w, @2
                                 	loop_base0:
                                 		VOID @0
                                 		dec w
                                 		brne loop_base0
                                 .endmacro
                                 ;==================================================================================================================================================================================================================
                                 ;==================================================================================================================================================================================================================
                                 ; COLONNE2	; macro ; arg: @0=a0, @1 @2 et @3 sont des constantes; used: w
                                 ; but: remplir 24 cases mémoires pour afficher une colonne sur la matrice, colonnes modulables selon les constantes
                                 ;COLONNEx, le x représente le nombre de changements de couleur dans la colonne 
                                 .macro COLONNE2
                                 	ldi w, @1
                                 	loop_base1:
                                 		ORANGE @0
                                 		dec w 
                                 		brne loop_base1
                                 	ldi w, @2
                                 	loop_base2:
                                 		VOID @0
                                 		dec w
                                 		brne loop_base2
                                 	ldi w, @3
                                 	loop_base3:
                                 		ORANGE @0
                                 		dec w
                                 		brne loop_base3
                                 .endmacro
                                 ;==================================================================================================================================================================================================================
                                 ;==================================================================================================================================================================================================================
                                 ; COLONNE3	; macro ; arg: @0=a0, @1 @2 @3 et @4 sont des constantes; used: w
                                 ; but: remplir 24 cases mémoires pour afficher une colonne sur la matrice, colonnes modulables selon les constantes
                                 ;COLONNEx, le x représente le nombre de changements de couleur dans la colonne 
                                 .macro COLONNE3
                                 	ldi w, @1
                                 	loop_base4:
                                 		ORANGE @0
                                 		dec w 
                                 		brne loop_base4
                                 	ldi w, @2
                                 	loop_base5:
                                 		VOID @0
                                 		dec w
                                 		brne loop_base5
                                 	ldi w, @3
                                 	loop_base6:
                                 		ORANGE @0
                                 		dec w
                                 		brne loop_base6
                                 	ldi w, @4
                                 	loop_base7:
                                 		VOID @0
                                 		dec w
                                 		brne loop_base7
                                 .endmacro
                                 ;==================================================================================================================================================================================================================
                                 ;==================================================================================================================================================================================================================
                                 ; COLONNE6	; macro ; arg: @0=a0, @1 @2 @3 @4 @5 @6 et @7 sont des constantes; used: w
                                 ; but: remplir 24 cases mémoires pour afficher une colonne sur la matrice, colonnes modulables selon les constantes
                                 ;COLONNEx, le x représente le nombre de changements de couleur dans la colonne 
                                 .macro COLONNE6
                                 	ldi w, @1
                                 	loop_base8:
                                 		ORANGE @0
                                 		dec w 
                                 		brne loop_base8
                                 	ldi w, @2
                                 	loop_base9:
                                 		VOID @0
                                 		dec w
                                 		brne loop_base9
                                 	ldi w, @3
                                 	loop_base10:
                                 		ORANGE @0
                                 		dec w
                                 		brne loop_base10
                                 	ldi w, @4
                                 	loop_base11:
                                 		VOID @0
                                 		dec w
                                 		brne loop_base11
                                 	ldi w, @5
                                 	loop_base12:
                                 		ORANGE @0
                                 		dec w
                                 		brne loop_base12
                                 	ldi w, @6
                                 	loop_base13:
                                 		VOID @0
                                 		dec w
                                 		brne loop_base13
                                 	ldi w, @7
                                 	loop_base14:
                                 		ORANGE @0
                                 		dec w
                                 		brne loop_base14
                                 .endmacro
                                 ;==================================================================================================================================================================================================================
                                 ;==================================================================================================================================================================================================================
                                 ; COLONNE5	; macro ; arg: @0=a0, @1 @2 @3 @4 et @5 sont des constantes; used: w
                                 ; but: remplir 24 cases mémoires pour afficher une colonne sur la matrice, colonnes modulables selon les constantes
                                 ;COLONNEx, le x représente le nombre de changements de couleur dans la colonne 
                                 .macro COLONNE5
                                 	ldi w, @1
                                 	loop_base15:
                                 		ORANGE @0
                                 		dec w 
                                 		brne loop_base15
                                 	ldi w, @2
                                 	loop_base16:
                                 		VOID @0
                                 		dec w
                                 		brne loop_base16
                                 	ldi w, @3
                                 	loop_base17:
                                 		ORANGE @0
                                 		dec w
                                 		brne loop_base17
                                 	ldi w, @4
                                 	loop_base18:
                                 		VOID @0
                                 		dec w
                                 		brne loop_base18
                                 		ldi w, @5
                                 	loop_base19:
                                 		ORANGE @0
                                 		dec w
                                 		brne loop_base19
                                 .endmacro
                                 ;==================================================================================================================================================================================================================
                                 ;==================================================================================================================================================================================================================
                                 
                                 ws2812b4_init:
000023 e002
000024 b902                      	OUTI	DDRE,0x02
000025 9508                      ret
                                 
                                 ws2812b4_byte3wr:
000026 e008                      	ldi w,8
                                 ws2b3_starta0:
000027 fd27                      	sbrc a0,7
000028 c006                      	rjmp	ws2b3w1
000029 2433
00002a 9a19
00002b b833
00002c 0000
00002d 0000                      	WS2812b4_WR0						; write a zero
00002e c004                      	rjmp	ws2b3_nexta0
                                 ws2b3w1:
00002f 9a19
000030 0000
000031 0000
000032 9819                      	WS2812b4_WR1
                                 ws2b3_nexta0:
000033 0f22                      	lsl a0
000034 950a                      	dec	w
000035 f789                      	brne ws2b3_starta0
                                 
000036 e008                      	ldi w,8
                                 ws2b3_starta1:
000037 fd37                      	sbrc a1,7
000038 c006                      	rjmp	ws2b3w1a1
000039 2433
00003a 9a19
00003b b833
00003c 0000
00003d 0000                      	WS2812b4_WR0						; write a zero
00003e c004                      	rjmp	ws2b3_nexta1
                                 ws2b3w1a1:
00003f 9a19
000040 0000
000041 0000
000042 9819                      	WS2812b4_WR1
                                 ws2b3_nexta1:
000043 0f33                      	lsl a1
000044 950a                      	dec	w
000045 f789                      	brne ws2b3_starta1
                                 
000046 e008                      	ldi w,8
                                 ws2b3_starta2:
000047 fd47                      	sbrc a2,7
000048 c006                      	rjmp	ws2b3w1a2
000049 2433
00004a 9a19
00004b b833
00004c 0000
00004d 0000                      	WS2812b4_WR0						; write a zero
00004e c004                      	rjmp	ws2b3_nexta2
                                 ws2b3w1a2:
00004f 9a19
000050 0000
000051 0000
000052 9819                      	WS2812b4_WR1
                                 ws2b3_nexta2:
000053 0f44                      	lsl a2
000054 950a                      	dec	w
000055 f789                      	brne ws2b3_starta2	
                                 
000056 9508                      ret
                                 
                                 ws2812b4_reset:
000057 9819                      	cbi PORTE, 1
000058 e401
000059 2e30
00005a e001
00005b 943a
00005c f7f1
00005d 943a
00005e 950a
00005f f7d9                      	WAIT_US	50 	; 50 us are required, NO smaller works
000060 9508                      ret
                                 ;==================================================================================================================================================================================================================
                                 ;==================================================================================================================================================================================================================
                                 ;shift_mario_in_memory ; sous-routine ; arg:void ; used:r12 et r13, z 
                                 ;Cette sous-routine permet de sauvegarder l'adresse de la première composante de la LED représentant le personnage dans r12 et r13
                                 shift_mario_in_memory:
000061 2ede                      	mov r13, zl
000062 2ecf                      	mov r12, zh							;On sauve la position la position de la première composante de la LED juste après celle du personnage
000063 9488                      	clc
000064 e003
000065 1ad0                      	_SUBI r13, 0x03						;On retire 3 au byte pour retomber surl'adresse de la première composante 
000066 e000
000067 0ac0                      	_SBCI r12, 0						;de le LED du personnage, alors stocké dans r12 et r13	
000068 9508                      	ret
                                 ;==================================================================================================================================================================================================================
                                 ;==================================================================================================================================================================================================================
                                 ;affichage_matrice ; arg:void ; used: r0,r14,r15,a0,a1,a2, z
                                 ;Cette sous-routine permet de rafraîchir l'affichage de la matrice, elle diffère du premier remplissage de la matrice 
                                 ;car elle n'enregistre pas la position du personnage à chaque invocation, cependant elle vérifie si le personnage a atteint 
                                 ;la fin du niveau.
                                 affichage_matrice:
000069 2dee                      	mov zl, r14
00006a 2dff                      	mov zh, r15							;z pointe sur le début du niveau
00006b e400
00006c 2e00                      	_LDI r0, 64							;on charge r0 avec 64 pour les 64 LEDs à remplir
                                 	boucle_affi:
00006d 9121                      		ld a0, z+
00006e 9131                      		ld a1, z+						;Même fonctionnement que pour le premier affichage 
00006f 9141                      		ld a2, z+
                                 
000070 94f8                      		cli
000071 940e 0026                 		call ws2812b4_byte3wr			
                                 
000073 940a                      		dec r0
000074 f7c1                      		brne boucle_affi
000075 940e 0057                 		call ws2812b4_reset
                                 
000077 30fa                      		cpi zh, 0x0a					;Ici, le bout de la map est fixé à l'adresse 0x0a30
000078 f408                      		brsh fin_lvl					
000079 c006                      		rjmp retour
                                 	fin_lvl:
00007a 33e0                      		cpi zl, 0x30
00007b f408                      		brsh escape						;Lorsque z va pointer sur cette adresse, cela siginifiera que le personnage 
00007c c003                      		rjmp retour						;a terminé le niveau, il a donc gagné la partie	(l'adresse de retour du rcall devra donc être effacé de la pile)
                                 	escape: 
00007d e002
00007e 2e70                      		_LDI r7, 0x02
00007f 9508                      		ret
                                 retour:
000080 9508                      ret										;S'il n'est pas au bout de la carte, l'affichage est juste raffraîchi 
                                 ;==================================================================================================================================================================================================================
                                 ;==================================================================================================================================================================================================================
                                 ;jump_mario ; sous-routine ; arg:void ; used: r2,r6,r8,r10,r12,r13,r24,r28, z 
                                 ;Cette sous-routine permet de faire sauter le personnage, permettant de passer certains obstacles du niveau
                                 jump_mario:
                                 	;PLAY_SOUND jump, 50				
000081 2788                      	clr r24								;r24 est utilisé comme condition pour arrêter la montée et la descente du personnage
000082 e003
000083 2ea0                      	_LDI r10, 3							;r10 limite le nombre de pixels sautables à 3
                                 
                                 loop_jump:
000084 2ded                      	mov zl, r13			
000085 2dfc                      	mov zh, r12							;On place le pointeur à l'adresse du personnage 
000086 9488                      	clc
000087 0fec                      	add zl, r28							
000088 1df2                      	adc zh, r2							;On ajoute 3 au byte actuel, ainsi z pointe sur la LED au-dessus du personnage
                                 
000089 8180                      	ld r24, z							;On charge la première composante de la LED supérieure
00008a fd81                      	sbrc r24, 1							;On vérifie alors si elle est orange ou pas 
00008b c02a                      	rjmp descente						;Si c'est le cas, le personnage ne peut pas aller plus haut et entame alors sa descente
00008c 2788                      	clr r24								 
                                 										;Si la LED n'est pas orange on continue le programme
00008d 2ded                      	mov zl, r13							;z pointe de nouveau sur la LED du personnage
00008e 2dfc                      	mov zh, r12	
                                 
00008f 9221                      	st z+, r2
000090 9221                      	st z+, r2							;Ces trois instructions permettent de remplacer les composantes GRB du personnage par du vide (LED éteinte)
000091 9221                      	st z+, r2				
                                 			
000092 2ecf                      	mov r12, zh							;Ces trois instructions induisent un décalage de 3 dans la mémoire 
000093 2ede                      	mov r13, zl							;qui va être la nouvelle adresse de la LED du personnage	
                                 
000094 9281                      	st z+, r8	
000095 9221                      	st z+, r2							;Ces trois instructions permettent de remplacer les composantes GRB de la LED éteinte par celle du personnage (vert)	
000096 9221                      	st z+, r2
                                 
000097 fc70                      	sbrc r7, 0
000098 940c 0dcb                 	jmp inter_reset
00009a fc71                      	sbrc r7, 1
00009b 940c 0e34                 	jmp victory
                                 
00009d 94f8                      	cli						
00009e 940e 0069                 	call affichage_matrice				;On affiche alors la nouvelle matrice avec le personnage ayant effectué un saut d'une LED
0000a0 9478                      	sei						
0000a1 e604
0000a2 2e30
0000a3 e001
0000a4 930f
0000a5 923f
0000a6 e300
0000a7 2e30
0000a8 e006
0000a9 943a
0000aa f7f1
0000ab 943a
0000ac 950a
0000ad f7d9
0000ae 903f
0000af 910f
0000b0 943a
0000b1 f791
0000b2 950a
0000b3 f781                      	WAIT_MS 100
0000b4 94aa                      	dec r10
0000b5 f671                      	brne loop_jump						;Lorsque le personnage a sauté 3 LEDs, ou qu'il a rencontré une LED orange, il amorce sa descente
                                 
                                 descente:
0000b6 2ded                      	mov zl, r13							
0000b7 2dfc                      	mov zh, r12							;z pointe donc sur l'adresse de la LED à laquelle le personnage s'est arrêté
0000b8 9488                      	clc
0000b9 1bec                      	sub zl, r28							
0000ba 09f2                      	sbc zh, r2							;On retire 3 au byte, z pointe donc sur la LED du dessous
                                 
0000bb 8180                      	ld r24, z							;On charge la première composante de la LED inférieure		
0000bc fd81                      	sbrc r24, 1							;On vérifie alors si elle est orange ou pas 
0000bd 9508                      	ret									;Si c'est le cas, le personnage ne peut pas aller plus bas, on va sortir de la sous-routine après rafraîchissement de l'affichage
                                 	
0000be 2788                      	clr r24
0000bf 2ded                      	mov zl, r13							;z pointe sur la LED du personnage 
0000c0 2dfc                      	mov zh, r12
                                 
0000c1 9221                      	st z+, r2
0000c2 9221                      	st z+, r2							;Ces trois instructions permettent de remplacer les composantes GRB du personnage par du vide (LED éteinte)
0000c3 9221                      	st z+, r2							;z pointe donc actuellement sur la LED supérieure au personnage
                                 
0000c4 9488                      	clc
0000c5 19e6                      	sub zl, r6							;Ici on retire 6 à l'adresse pointée par z pr arriver à la LED inférieure au personnage désormais effacé
0000c6 09f2                      	sbc zh, r2					
                                 
0000c7 2ecf                      	mov r12, zh																					
0000c8 2ede                      	mov r13, zl							;on enregistre la position du personnage dans r12 et r13
                                 
0000c9 9281                      	st z+, r8
0000ca 9221                      	st z+, r2							;Ces trois instructions permettent de remplacer les composantes GRB de la LED éteinte par celle du personnage (vert)
0000cb 9221                      	st z+, r2
                                 
0000cc fc70                      	sbrc r7, 0
0000cd 940c 0dcb                 	jmp inter_reset
0000cf fc71                      	sbrc r7, 1
0000d0 940c 0e34                 	jmp victory
                                 
0000d2 94f8                      	cli						
0000d3 940e 0069                 	call affichage_matrice				;Rafraîchissement de la matrice
0000d5 9478                      	sei						
0000d6 e604
0000d7 2e30
0000d8 e001
0000d9 930f
0000da 923f
0000db e300
0000dc 2e30
0000dd e006
0000de 943a
0000df f7f1
0000e0 943a
0000e1 950a
0000e2 f7d9
0000e3 903f
0000e4 910f
0000e5 943a
0000e6 f791
0000e7 950a
0000e8 f781                      	WAIT_MS 100	
0000e9 cfcc                      	rjmp descente						;Tant que le personnage ne rencontre pas de LED orange, il continue de descendre (Boucle TANT QUE)
                                 ;==================================================================================================================================================================================================================
                                 ;==================================================================================================================================================================================================================
                                 ; LEVEL1	; macro ; arg:void ; used:void 
                                 ; but: remplir en mémoire toutes les colonnes pour créer le niveau 1
                                 .macro LEVEL1
                                 	COLONNE1_START a0, 1, 6
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE2 a0, 3, 3, 2
                                 	COLONNE2 a0, 3, 3, 2
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE1 a0, 2, 6
                                 	COLONNE1 a0, 3, 5
                                 	COLONNE1 a0, 4, 4
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE3 a0, 1, 2, 2, 3
                                 	COLONNE3 a0, 1, 2, 2, 3
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE2 a0, 1, 2, 5 
                                 	COLONNE2 a0, 1, 2, 5
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE2 a0, 3, 3, 2
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE2 a0, 1, 2, 5
                                 	COLONNE2 a0, 1, 5, 2
                                 	COLONNE2 a0, 1, 6, 1
                                 	COLONNE3 a0, 1, 2, 1, 4
                                 	COLONNE3 a0, 1, 2, 1, 4
                                 	COLONNE3 a0, 1, 2, 1, 4
                                 	COLONNE3 a0, 1, 4, 1, 2
                                 	COLONNE3 a0, 1, 4, 1, 2
                                 	COLONNE3 a0, 1, 4, 1, 2
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE1 a0, 2, 6
                                 	COLONNE1 a0, 3, 5
                                 	COLONNE1 a0, 2, 6
                                 	COLONNE2 a0, 1, 6, 1
                                 	COLONNE2 a0, 1, 5, 2
                                 	COLONNE2 a0, 1, 4, 3
                                 	COLONNE2 a0, 1, 5, 2
                                 	COLONNE2 a0, 1, 6, 1
                                 	COLONNE1 a0, 2, 6
                                 	COLONNE1 a0, 3, 5
                                 	COLONNE1 a0, 4, 4
                                 	COLONNE1 a0, 5, 3
                                 	COLONNE1 a0, 5, 3
                                 	COLONNE1 a0, 5, 3
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE2 a0, 4, 2, 2
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE2 a0, 3, 2, 3
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE2 a0, 2, 2, 4
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE1 a0, 1, 7
                                 .endmacro
                                 ;==================================================================================================================================================================================================================
                                 ;==================================================================================================================================================================================================================
                                 ; LEVEL2	; macro ; arg:void ; used:void 
                                 ; but: remplir en mémoire toutes les colonnes pour créer le niveau 2
                                 .macro LEVEL2
                                 	COLONNE1_START a0, 1, 6
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE2 a0, 2, 3, 3
                                 	COLONNE2 a0, 2, 3, 3
                                 	COLONNE2 a0, 3, 3, 2
                                 	COLONNE2 a0, 3, 3, 2
                                 	COLONNE2 a0, 4, 3, 1
                                 	COLONNE2 a0, 4, 3, 1
                                 	COLONNE1 a0, 5, 3
                                 	COLONNE1 a0, 5, 3
                                 	COLONNE2 a0, 4, 2, 2
                                 	COLONNE2 a0, 4, 2, 2
                                 	COLONNE2 a0, 3, 2, 3
                                 	COLONNE2 a0, 3, 2, 3
                                 	COLONNE2 a0, 2, 2, 4
                                 	COLONNE2 a0, 2, 2, 4
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE2 a0, 3, 2, 3
                                 	COLONNE2 a0, 3, 2, 3
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE3 a0, 1, 1, 1, 5
                                 	COLONNE3 a0, 1, 1, 1, 5
                                 	COLONNE3 a0, 1, 4, 1, 2
                                 	COLONNE3 a0, 1, 4, 1, 2
                                 	COLONNE3 a0, 1, 2, 1, 4
                                 	COLONNE3 a0, 1, 2, 1, 4
                                 	COLONNE1 a0, 7, 1
                                 	COLONNE3 a0, 2, 3, 2, 1
                                 	COLONNE3 a0, 1, 5, 1, 1
                                 	COLONNE3 a0, 2, 3, 2, 1
                                 	COLONNE1 a0, 6, 2
                                 	COLONNE1 a0, 6, 2
                                 	COLONNE1 a0, 5, 3
                                 	COLONNE1 a0, 5, 3
                                 	COLONNE1 a0, 4, 4
                                 	COLONNE1 a0, 4, 4
                                 	COLONNE1 a0, 3, 5
                                 	COLONNE1 a0, 3, 5
                                 	COLONNE1 a0, 2, 6
                                 	COLONNE1 a0, 2, 6
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE2 a0, 1, 2, 5
                                 	COLONNE6 a0, 1, 2, 1, 1, 1, 1, 1
                                 	COLONNE5 a0, 1, 2, 1, 3, 1
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE2 a0, 1, 2, 5
                                 	COLONNE3 a0, 1, 4, 2, 1
                                 	COLONNE3 a0, 1, 3, 2, 2
                                 	COLONNE2 a0, 1, 2, 5
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE2 a0, 1, 2, 5
                                 	COLONNE5 a0, 1, 2, 1, 3, 1
                                 	COLONNE3 a0, 1, 3, 3, 1
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE5 a0, 1, 1, 1, 1, 4
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE1 a0, 1, 7
                                 	COLONNE1 a0, 1, 7
                                 .endmacro
                                 ;==================================================================================================================================================================================================================
                                 ;==================================================================================================================================================================================================================
                                 ; CLEARALL	; macro ; arg:void ; used:void 
                                 ; but: Mettre à zéro les registres, ports I/O utilisés, timer/interrupts, stack
                                 .macro CLEARALL
                                 	clr_stack:
                                 		pop a0
                                 		in w, SPL
                                 		cpi w, 0xff
                                 		breq PC+2
                                 		rjmp clr_stack
                                 	clr r0
                                 	clr r1
                                 	clr r2
                                 	clr r3
                                 	clr r4
                                 	clr r5
                                 	clr r6
                                 	clr r7
                                 	clr r8
                                 	clr r9
                                 	clr r10
                                 	clr r11
                                 	clr r12
                                 	clr r13
                                 	clr r14
                                 	clr r15
                                 	clr r16
                                 	clr r17
                                 	clr r18
                                 	clr r19
                                 	clr r20
                                 	clr r21
                                 	clr r22
                                 	clr r23
                                 	clr r24
                                 	clr r25
                                 	clr r26
                                 	clr r27
                                 	clr r28
                                 	clr r29
                                 	clr r30
                                 	clr r31		
                                 	OUTI	DDRD, 0x00	
                                 	OUTI	DDRE, 0x00		
                                 	OUTI	EIMSK, 0x00	
                                 	OUTI ASSR, 0x00
                                 	OUTI TCCR0, 0x00
                                 	OUTI TIMSK, 0x00
                                 	OUTI SREG, 0x00
                                 .endmacro
                                 ;==================================================================================================================================================================================================================
                                 ;==================================================================================================================================================================================================================
                                 ; RESET_MAT	; macro ; arg:void ; used:void 
                                 ; but: remplir en mémoire l'équivalent de 64 LEDs vides pour éteindre la matrice
                                 .macro RESET_MAT
                                 	ldi w, 64
                                 	loop_baseNull:
                                 		VOID a0
                                 		dec w
                                 		brne loop_baseNull
                                 .endmacro
                                 ;==================================================================================================================================================================================================================
                                 ;==================================================================================================================================================================================================================	
                                 ; mainLCD	; sous-routine ; arg:void ; used:b0,PIND,a0
                                 ; but: Offrir à l'utilisateur des menus et paramètres à régler avant de lancer la partie visibles 
                                 ;sur l'écran LCD
                                 
                                 ;==================================================================================================================================================================================================================
                                 .include "file_sound.asm"
                                 
                                  * macros_sound.asm
                                  *
                                  *  Created: 28/05/2022 21:09:53
                                  *   Author: benand
                                  */ 
                                  .include "sound.asm"
                                 
                                 ; purpose library, sound generation
                                 
                                 sound:
                                 ; in	a0	period of oscillation (in 10us)
                                 ; 	b0	duration of sound (in 2.5ms)
                                 
0000ea 2f76                      	mov	b1,b0		; duration high byte = b
0000eb 2766                      	clr	b0		; duration  low byte = 0
0000ec 2733                      	clr	a1		; period high byte = a
0000ed 2322                      	tst	a0
0000ee f071                      	breq	sound_off	; if a0=0 then no sound	
                                 sound1:
0000ef 2f02                      	mov	w,a0		
0000f0 d012                      	rcall	wait9us		; 9us
0000f1 0000                      	nop			; 0.25us
0000f2 950a                      	dec	w		; 0.25us
0000f3 f7e1                      	brne	PC-3		; 0.50us	total = 10us
0000f4 9bc2
0000f5 c002
0000f6 98c2
0000f7 c001
0000f8 9ac2                      	INVP	PORTB,SPEAKER	; invert piezo output
0000f9 1b62                      	sub	b0,a0		; decrement duration low  byte
0000fa 0b73                      	sbc	b1,a1		; decrement duration high byte
0000fb f798                      	brcc	sound1		; continue if duration>0
0000fc 9508                      	ret
                                 
                                 sound_off:
0000fd e021                      	ldi	a0,1
0000fe d004                      	rcall	wait9us
0000ff 1b62                      	sub	b0,a0		; decrement duration low  byte
000100 0b73                      	sbc	b1,a1		; decrement duration high byte
000101 f7e0                      	brcc	PC-3		; continue if duration>0
000102 9508                      	ret
                                 
                                 ; === wait routines ===
                                 
000103 c000                      wait9us:rjmp	PC+1		; waiting 2 cycles
000104 c000                      	rjmp	PC+1		; waiting 2 cylces
000105 d000                      wait8us:rcall	wait4us		; recursive call with "falling through"
000106 d000                      wait4us:rcall	wait2us	
000107 0000                      wait2us:nop
000108 9508                      	ret		; rcall(4), nop(1), ret(3) = 8cycl. (=2us)
                                 
                                 ; === calculation of the musical scale ===
                                  
                                 ; period (10us)	= 100'000/freq(Hz)
                                 .equ	do	= 100000/517	; (517 Hz)
                                 .equ	dom	= do*944/1000	; do major
                                 .equ	re	= do*891/1000
                                 .equ	rem	= do*841/1000	; re major
                                 .equ	mi	= do*794/1000
                                 .equ	fa	= do*749/1000
                                 .equ	fam	= do*707/1000	; fa major
                                 .equ	so	= do*667/1000
                                 .equ	som	= do*630/1000	; so major
                                 .equ	la	= do*595/1000
                                 .equ	lam	= do*561/1000	; la major
                                 .equ	si	= do*530/1000
                                 
                                 .equ	do2	= do/2
                                 .equ	dom2 = dom/2
                                 .equ	re2	= re/2
                                 .equ	rem2 = rem/2
                                 .equ	mi2	= mi/2
                                 .equ	fa2	= fa/2
                                 .equ	fam2 = fam/2
                                 .equ	so2	= so/2
                                 .equ	som2 = som/2
                                 .equ	la2	= la/2
                                 .equ	lam2 = lam/2
                                 .equ	si2	= si/2
                                 
                                 .equ	do3	= do/4
                                 .equ	dom3 = dom/4
                                 .equ	re3	= re/4
                                 .equ	rem3 = rem/4
                                 .equ	mi3	= mi/4
                                 .equ	fa3	= fa/4
                                 .equ	fam3 = fam/4
                                 .equ	so3	= so/4
                                 .equ	som3 = som/4
                                 .equ	la3	= la/4
                                 .equ	lam3 = lam/4
                                 .equ	si3	= si/4	
                                 
                                 .equ	do4 = do/8
                                 .equ	mi4 = mi/8
                                 
                                  .org 0x3000
                                 mario :
003000 6060
003001 6060
003002 8080
003003 8080
003004 9999
003005 9999                      	.db do2, do2, do2, do2, so, so, so, so, mi, mi, mi, mi
003006 7272
003007 6672
003008 6666
003009 6c6c
00300a 7272
00300b 8072                      	.db la, la, la, si, si, si, lam, lam, la, la, la, so
00300c 8080
00300d 4c4c
00300e 4040
00300f 3939
003010 4839
003011 4048
003012 4040                      	.db so, so, mi2, mi2, so2, so2, la2, la2, la2, fa2, fa2, so2, so2, so2
003013 4c4c
003014 604c
003015 5560
003016 6655
003017 6666
003018 6666                      	.db mi2, mi2, mi2, do2, do2, re2, re2, si, si, si, si, si
003019 6060
00301a 6060
00301b 8080
00301c 8080
00301d 9999
00301e 9999                      	.db do2, do2, do2, do2, so, so, so, so, mi, mi, mi, mi
00301f 7272
003020 6672
003021 6666
003022 6c6c
003023 7272
003024 8072                      	.db la, la, la, si, si, si, lam, lam, la, la, la, so
003025 8080
003026 4c4c
003027 4040
003028 3939
003029 4839
00302a 4048
00302b 4040                      	.db so, so, mi2, mi2, so2, so2, la2, la2, la2, fa2, fa2, so2, so2, so2
00302c 4c4c
00302d 604c
00302e 5560
00302f 6655
003030 6666
003031 6666                      	.db mi2, mi2, mi2, do2, do2, re2, re2, si, si, si, si, si
\\files7\data\benand\Microcontrôleurs\Projet\map\map\file_sound.asm(19): warning: .cseg .db misalignment - padding zero byte
\\files7\data\benand\Microcontrôleurs\Projet\map\map\Map1Done.asm(35): '\\files7\data\benand\Microcontrôleurs\Projet\map\map\file_sound.asm' included form here
003032 0000                      	.db 0
                                 
                                 .org 0x0a50
                                 game_over : 
000a50 3030
000a51 3030
000a52 4040
000a53 4040
000a54 4c4c
000a55 4c4c                      	.db do3, do3, do3, do3, so2, so2, so2, so2, mi2, mi2, mi2, mi2
000a56 3939
000a57 3333
000a58 3939
000a59 3c3c
000a5a 3636
000a5b 3c3c                      	.db la2, la2, si2, si2, la2, la2, som2, som2, lam2, lam2, som2, som2
000a5c 4840
000a5d 4040
000a5e 4040
000a5f 4040                      	.db so2, fa2, so2, so2, so2, so2, so2, so2
\\files7\data\benand\Microcontrôleurs\Projet\map\map\file_sound.asm(26): warning: .cseg .db misalignment - padding zero byte
\\files7\data\benand\Microcontrôleurs\Projet\map\map\Map1Done.asm(35): '\\files7\data\benand\Microcontrôleurs\Projet\map\map\file_sound.asm' included form here
000a60 0000                      	.db 0
                                 
                                 .org 0x0a80
                                 level_complete : 
000a80 6680
000a81 4055
000a82 2a33
000a83 2020
000a84 2a20
000a85 2a2a                      	.db so, si, re2, so2, si2, re3, so3, so3, so3, re3, re3, re3
000a86 6079
000a87 3c51
000a88 2830
000a89 1e1e
000a8a 281e
000a8b 2828                      	.db som, do2, rem2, som2, do3, rem3, som3, som3, som3, rem3, rem3, rem3
000a8c 556c
000a8d 3648
000a8e 242a
000a8f 1b1b
000a90 1b1b
000a91 1b1b                      	.db lam, re2, fa2, lam2, re3, fa3, lam3, lam3, lam3, lam3, lam3, lam3
000a92 1818
000a93 1818                      	.db do4, do4, do4, do4
\\files7\data\benand\Microcontrôleurs\Projet\map\map\file_sound.asm(34): warning: .cseg .db misalignment - padding zero byte
\\files7\data\benand\Microcontrôleurs\Projet\map\map\Map1Done.asm(35): '\\files7\data\benand\Microcontrôleurs\Projet\map\map\file_sound.asm' included form here
000a94 0000                      	.db 0
                                 
                                 .org 0x0ab0
                                 jump : 
000ab0 1319                      	.db si3, mi4
\\files7\data\benand\Microcontrôleurs\Projet\map\map\file_sound.asm(39): warning: .cseg .db misalignment - padding zero byte
\\files7\data\benand\Microcontrôleurs\Projet\map\map\Map1Done.asm(35): '\\files7\data\benand\Microcontrôleurs\Projet\map\map\file_sound.asm' included form here
000ab1 0000                      	.db 0
                                 
                                  .macro PLAY_SOUND
                                     push a0
                                     push b0
                                 	push a1
                                 	push a2
                                     ldi zl, low(2*@0)
                                     ldi zh, high(2*@0)
                                     lpm
                                     adiw zl, 1
                                     tst r0
                                     breq PC+5
                                     mov a0, r0
                                     ldi b0, @1
                                     call sound
                                     rjmp PC-7
                                 	pop a2
                                 	pop a1
                                     pop b0
                                     pop a0
                                 .include "macros_LCD.asm"
                                 
                                  * macros_LCD.asm
                                  *
                                  *  Created: 28/05/2022 21:08:09
                                  *   Author: benand
                                  */ 
                                 .include "lcd.asm"
                                 
                                 ; purpose  LCD HD44780U library
                                 ; ATmega 128 and Atmel Studio 7.0 compliant
                                 
                                 ; === definitions ===
                                 .equ	LCD_IR	= 0x8000	; address LCD instruction reg
                                 .equ	LCD_DR	= 0xc000	; address LCD data register
                                 
                                 ; === subroutines ===
                                 LCD_wr_ir:
                                 ; in	w (byte to write to LCD IR)
000ab2 9030 8000                 	lds	u, LCD_IR		; read IR to check busy flag  (bit7)
000ab4 fc37
000ab5 cffc                      	JB1	u,7,LCD_wr_ir	; Jump if Bit=1 (still busy)
000ab6 d003                      	rcall	lcd_4us		; delay to increment DRAM addr counter
000ab7 9300 8000                 	sts	LCD_IR, w		; store w in IR
000ab9 9508                      	ret
                                 	
                                 lcd_4us:
000aba d000                      	rcall	lcd_2us		; recursive call		
                                 lcd_2us:
000abb 0000                      	nop					; rcall(3) + nop(1) + ret(4) = 8 cycles (2us)
000abc 9508                      	ret
                                 
                                 LCD:
                                 LCD_putc:
000abd 302d
000abe f169                      	JK	a0,CR,LCD_cr	; Jump if a0=CR
000abf 302a
000ac0 f1a9                      	JK	a0,LF,LCD_lf	; Jump if a0=LF
                                 LCD_wr_dr:
                                 ; in	a0 (byte to write to LCD DR)
000ac1 9100 8000                 	lds	w, LCD_IR		; read IR to check busy flag  (bit7)
000ac3 fd07
000ac4 cffc                      	JB1	w,7,LCD_wr_dr	; Jump if Bit=1 (still busy)
000ac5 dff4                      	rcall	lcd_4us		; delay to increment DRAM addr counter
000ac6 9320 c000                 	sts	LCD_DR, a0		; store a0 in DR
000ac8 9508                      	ret	
                                 	
000ac9 e001
000aca cfe7                      LCD_clear:			JW	LCD_wr_ir, 0b00000001		; clear display
000acb e002
000acc cfe5                      LCD_home:			JW	LCD_wr_ir, 0b00000010		; return home
000acd e100
000ace cfe3                      LCD_cursor_left:	JW	LCD_wr_ir, 0b00010000	; move cursor to left
000acf e104
000ad0 cfe1                      LCD_cursor_right:	JW	LCD_wr_ir, 0b00010100	; move cursor to right
000ad1 e108
000ad2 cfdf                      LCD_display_left:	JW	LCD_wr_ir, 0b00011000	; shifts display to left
000ad3 e10c
000ad4 cfdd                      LCD_display_right:	JW	LCD_wr_ir, 0b00011100	; shifts display to right
000ad5 e00d
000ad6 cfdb                      LCD_blink_on:		JW	LCD_wr_ir, 0b00001101	; Display=1,Cursor=0,Blink=1
000ad7 e00c
000ad8 cfd9                      LCD_blink_off:		JW	LCD_wr_ir, 0b00001100	; Display=1,Cursor=0,Blink=0
000ad9 e00e
000ada cfd7                      LCD_cursor_on:		JW	LCD_wr_ir, 0b00001110	; Display=1,Cursor=1,Blink=0
000adb e00c
000adc cfd5                      LCD_cursor_off:		JW	LCD_wr_ir, 0b00001100	; Display=1,Cursor=0,Blink=0
                                 		
                                 LCD_init:
000add b705                      	in	w,MCUCR					; enable access to ext. SRAM
000ade 6c00                      	sbr	w,(1<<SRE)+(1<<SRW10)
000adf bf05                      	out	MCUCR,w
000ae0 e001
000ae1 dfd0                      	CW	LCD_wr_ir, 0b00000001	; clear display
000ae2 e006
000ae3 dfce                      	CW	LCD_wr_ir, 0b00000110	; entry mode set (Inc=1, Shift=0)
000ae4 e00c
000ae5 dfcc                      	CW	LCD_wr_ir, 0b00001100	; Display=1,Cursor=0,Blink=0	
000ae6 e308
000ae7 dfca                      	CW	LCD_wr_ir, 0b00111000	; 8bits=1, 2lines=1, 5x8dots=0
000ae8 9508                      	ret
                                 
                                 LCD_pos:
                                 ; in	a0 = position (0x00..0x0f first line, 0x40..0x4f second line)
000ae9 2f02                      	mov	w,a0
000aea 6800                      	ori	w,0b10000000
000aeb cfc6                      	rjmp	LCD_wr_ir
                                 
                                 LCD_cr:
                                 ; moving the cursor to the beginning of the line (carriage return)
000aec 9100 8000                 	lds	w, LCD_IR			; read IR to check busy flag  (bit7)
000aee fd07
000aef cffc                      	JB1	w,7,LCD_cr			; Jump if Bit=1 (still busy)
000af0 7400                      	andi	w,0b01000000	; keep bit6 (begin of line 1/2)
000af1 6800                      	ori	w,0b10000000		; write address command
000af2 dfc7                      	rcall	lcd_4us			; delay to increment DRAM addr counter
000af3 9300 8000                 	sts	LCD_IR,w			; store in IR
000af5 9508                      	ret
                                 
                                 LCD_lf:
                                 ; moving the cursor to the beginning of the line 2 (line feed)
000af6 932f                      	push	a0				; safeguard a0
000af7 e420                      	ldi	a0,$40				; load position $40 (begin of line 2)
000af8 dff0                      	rcall	LCD_pos			; set cursor position
000af9 912f                      	pop	a0					; restore a0
                                 .include "encoder.asm"
000afa 9508                      
                                 ; purpose library angular encoder operation
                                 
                                 ; === definitions ===
                                 .equ	ENCOD	= PORTB
                                 
                                 .dseg
000100                           enc_old:.byte	1
                                 .cseg
                                 
                                 ; === routines ===
                                 
                                 encoder_init:
000afb b307                      	in	w,ENCOD-1		; make 3 lines input
000afc 780f                      	andi	w,0b10001111
000afd bb07                      	out	ENCOD-1,w
000afe b308                      	in	w,ENCOD			; enable 3 internal pull-ups
000aff 6700                      	ori	w,0b01110000
000b00 bb08                      	out	ENCOD,w
000b01 9508                      	ret
                                 
                                 encoder:
                                 ; a0,b0	if button=up   then increment/decrement a0	 
                                 ; a0,b0	if button=down then incremnt/decrement b0 
                                 ; T 	T=1 button press (transition up-down)
                                 ; Z	Z=1 button down change
                                 
000b02 94e8                      	clt						; preclear T
000b03 b316                      	in	_w,ENCOD-2			; read encoder port (_w=new)
                                 	
000b04 7710                      	andi	_w,0b01110000	; mask encoder lines (A,B,I)
000b05 9020 0100                 	lds	_u,enc_old			; load prevous value (_u=old)
000b07 1512                      	cp	_w,_u				; compare new<>old ?
000b08 f411                      	brne	PC+3
000b09 9498                      	clz
000b0a 9508                      	ret						; if new=old then return (Z=0)
000b0b 9310 0100                 	sts	enc_old,_w			; store encoder value for next time
                                 
000b0d 2621                      	eor	_u,_w				; exclusive or detects transitions
000b0e 9498                      	clz						; clear Z flag
000b0f fc26                      	sbrc	_u,ENCOD_I
000b10 c01a                      	rjmp	encoder_button	; transition on I (button)
000b11 fe24                      	sbrs	_u,ENCOD_A
000b12 9508                      	ret						; return (no transition on I or A)	
                                 
000b13 ff16                      	sbrs	_w,ENCOD_I		; is the button up or down ?
000b14 c00b                      	rjmp	i_down
                                 i_up:	
000b15 fd14                      	sbrc	_w,ENCOD_A
000b16 c004                      	rjmp	a_rise
                                 a_fall:
000b17 9523                      	inc	a0					; if B=1 then increment
000b18 ff15                      	sbrs	_w,ENCOD_B
000b19 5022                      	subi	a0,2			; if B=0 then decrement
000b1a c003                      	rjmp	i_up_done
                                 a_rise:
000b1b 9523                      	inc	a0					; if B=0 then increment
000b1c fd15                      	sbrc	_w,ENCOD_B
000b1d 5022                      	subi	a0,2			; if B=1 then decrement
                                 i_up_done:
000b1e 9498                      	clz						; clear Z
000b1f 9508                      	ret
                                 
                                 i_down:	
000b20 fd14                      	sbrc	_w,ENCOD_A
000b21 c004                      	rjmp	a_rise2
                                 a_fall2:
000b22 9563                      	inc	b0					; if B=1 then increment
000b23 ff15                      	sbrs	_w,ENCOD_B
000b24 5062                      	subi	b0,2			; if B=0 then decrement
000b25 c003                      	rjmp	i_down_done
                                 a_rise2:
000b26 9563                      	inc	b0					; if B=0 then increment
000b27 fd15                      	sbrc	_w,ENCOD_B
000b28 5062                      	subi	b0,2			; if B=1 then decrement
                                 i_down_done:
000b29 9418                      	sez						; set Z
000b2a 9508                      	ret
                                 
                                 encoder_button:
000b2b fd16                      	sbrc	_w,ENCOD_I
000b2c c002                      	rjmp	i_rise
                                 i_fall:
000b2d 9468                      	set						; set T=1 to indicate button press
000b2e 9508                      	ret
                                 i_rise:
000b2f 9508                      	ret
                                 
                                 .macro	CYCLIC	;reg,lo,hi
                                 	cpi	@0,@1-1
                                 	brne	PC+2
                                 	ldi	@0,@2
                                 	cpi	@0,@2+1
                                 	brne	PC+2
                                 	ldi	@0,@1
                                 .endmacro
                                 .include "printf.asm"
                                 
                                 ; purpose library, formatted output generation
                                 ; author (c) R.Holzer (adapted MICRO210/EE208 A.Schmid)
                                 ; v2019.02 20180821 AxS supports SRAM input from 0x0260
                                 ;					through 0x02ff that should be reserved
                                 
                                 ; === description ===
                                 ; 
                                 ; The program "printf" interprets and prints formatted strings.
                                 ; The special formatting characters regognized are:
                                 ;
                                 ; FDEC	decimal number
                                 ; FHEX	hexadecimal number
                                 ; FBIN	binary number
                                 ; FFRAC	fixed fraction number
                                 ; FCHAR	single ASCII character
                                 ; FSTR	zero-terminated ASCII string
                                 ;	
                                 ; The special formatting characters are distinguished from normal 
                                 ; ASCII characters by having their bit7 set to 1.
                                 ;
                                 ; Signification of bit fields:
                                 ;
                                 ; b 	bytes		1..4 b bytes		2
                                 ; s 	sign		0(unsigned), 1(signed)	1
                                 ; i		integer digits	
                                 ; e 	base		2,,36			5
                                 ; dp 	dec. point	0..32			5
                                 ; $if	i=integer digits,  0=all digits,  1..15 digits 
                                 ;		f=fraction digits, 0=no fraction, 1..15 digits
                                 ;
                                 ; Formatting characters must be followed by an SRAM address (0..ff)
                                 ; that determines the origin of variables that must be printed (if any)
                                 ; FBIN,	sram
                                 ; FHEX,	sram
                                 ; FDEC,	sram
                                 ; FCHAR,sram
                                 ; FSTR,	sram
                                 ;
                                 ; The address 'sram' is a 1-byte constant. It addresses
                                 ; 	 0..1f	registers r0..r31, 
                                 ; 	20..3f	i/o ports, (need to be addressed with an offset of $20)
                                 ;	0x0260..0x02ff	SRAM
                                 ; Variables can be located into register and I/0s, and can also
                                 ; be stored into data SRAM at locations 0x0200 through 0x02ff. Any
                                 ; sram address higher than 0x0060 is assumed to be at (0x0260+address)
                                 ; from automatic address detection in _printf_formatted: and subsequent
                                 ; assignment to xh; xl keeps its value. Consequently, variables that are
                                 ; to be stored into SRAM and further printed by fprint must reside at
                                 ; 0x0200 up to 0x02ff, and must be addressed using a label. Usage: see
                                 ; file string1.asm, for example.
                                 
                                 ; The FFRAC formatting character must be followed by 
                                 ;	ONE sram address and 
                                 ;	TWO more formatting characters
                                 ; FFRAC,sram,dp,$if
                                 
                                 ; dp	decimal point position, 0=right, 32=left
                                 ; $if	format i.f, i=integer digits, f=fraction digits
                                 
                                 ; The special formatting characters use the following coding
                                 ;
                                 ; FDEC	11bb'iiis	i=0 all digits, i=1-7 digits
                                 ; FBIN	101i'iiis	i=0 8 digits,	i=1-7 digits
                                 ; FHEX	1001'iiis	i=0 8 digits,	i=1-7 digits
                                 ; FFRAC	1000'1bbs
                                 ; FCHAR	1000'0100
                                 ; FSTR	1000'0101
                                 ; FREP	1000'0110
                                 ; FFUNC	1000'0111
                                 ;	1000'0010
                                 ;	1000'0011
                                 ; FESC	1000'0000
                                 
                                 ; examples
                                 ; formatting string			printing
                                 ; "a=",FDEC,a,0				1-byte variable a, unsigned decimal
                                 ; "a=",FDEC2,a,0			2-byte variable a (a1,a0), unsigend
                                 ; "a=",FDEC|FSIGN,a,0		1-byte variable 1, signed decimal
                                 ; "n=",FBIN,PIND+$20,0		i/o port, binary, notice offset of $20
                                 ; "f=",FFRAC4|FSIGN,a,16,$88,0	4-byte signed fixed-point fraction
                                 ;				dec.point at 16, 8 int.digits, 8 frac.digits	
                                 ; "f=",FFRAC2,a,16,$18,0		2-byte unsigned fixed-point fraction
                                 ;				dec.point at 16, 1 int.digits, 8 frac.digits	
                                 ; "a=",FDEC|FDIG5|FSIGN,a,0	1-byte variable, 5-digit, decimal, signed
                                 ; "a=",FDEC|FDIG5,a,0		1-byte variable, 5-digit, decimal, unsigned
                                 
                                 ; === registers modified ===
                                 ; e0,e1	used to transmit address of putc routine
                                 ; zh,zl	used as pointer to prog-memory
                                 
                                 ; === constants ==============================================
                                 
                                 .equ	FDEC	= 0b11000000	; 1-byte variable
                                 .equ	FDEC2	= 0b11010000	; 2-byte variable
                                 .equ	FDEC3	= 0b11100000	; 3-byte variable
                                 .equ	FDEC4	= 0b11110000	; 4-byte variable
                                 
                                 .equ	FBIN	= 0b10100000
                                 .equ	FHEX	= 0b10010100	; 1-byte variable
                                 .equ	FHEX2	= 0b10011000	; 2-byte variable
                                 .equ	FHEX3	= 0b10011100	; 3-byte variable
                                 .equ	FHEX4	= 0b10010000	; 4-byte variable
                                 
                                 .equ	FFRAC	= 0b10001000	; 1-byte variable
                                 .equ	FFRAC2	= 0b10001010	; 2-byte variable
                                 .equ	FFRAC3	= 0b10001100	; 3-byte variable
                                 .equ	FFRAC4	= 0b10001110	; 4-byte variable
                                 
                                 .equ	FCHAR	= 0b10000100
                                 .equ	FSTR	= 0b10000101
                                 
                                 .equ	FSIGN	= 0b00000001
                                 
                                 .equ	FDIG1	= 1<<1
                                 .equ	FDIG2	= 2<<1
                                 .equ	FDIG3	= 3<<1	
                                 .equ	FDIG4	= 4<<1
                                 .equ	FDIG5	= 5<<1
                                 .equ	FDIG6	= 6<<1
                                 .equ	FDIG7	= 7<<1
                                 
                                 ; ===macro ====================================================
                                 
                                 .macro	PRINTF			; putc function (UART, LCD...)
                                 	ldi	w, low(@0)		; address of "putc" in e1:e0
                                 	mov	e0,w
                                 	ldi	w,high(@0)
                                 	mov	e1,w
                                 	call	_printf
                                 	.endmacro
                                 
                                 ; mod	y,z
                                 
                                 
                                 ; === routines ================================================
                                 
                                 _printf:
000b30 91ff
000b31 91ef                      	POPZ			; z points to begin of "string"
000b32 0fee
000b33 1fff                      	MUL2Z			; multiply Z by two, (word ptr -> byte ptr)
000b34 93af
000b35 93bf                      	PUSHX
                                 		
                                 _printf_read:
000b36 95c8                      	lpm				; places prog_mem(Z) into r0 (=c)
000b37 9631                      	adiw	zl,1	; increment pointer Z
000b38 2000                      	tst	r0			; test for ZERO (=end of string)
000b39 f021                      	breq	_printf_end	; char=0 indicates end of ascii string
000b3a f04a                      	brmi	_printf_formatted ; bit7=1 indicates formatting character
000b3b 2d00                      	mov	w,r0
000b3c d017                      	rcall	_putw	; display the character
000b3d cff8                      	rjmp	_printf_read	; read next character in the string
                                 	
                                 _printf_end:
000b3e 9631                      	adiw	zl,1	; point to the next character
000b3f 95f6
000b40 95e7                      	DIV2Z			; divide by 2 (byte ptr -> word ptr)
000b41 91bf
000b42 91af                      	POPX
000b43 9409                      	ijmp			; return to instruction after "string"
                                 
                                 _printf_formatted:
                                 
                                 ; FDEC	11bb'iiis
                                 ; FBIN	101i'iiis
                                 ; FHEX	1001'iiis
                                 ; FFRAC	1000'1bbs
                                 ; FCHAR	1000'0100
                                 ; FSTR	1000'0101
                                 
000b44 fa00                      	bst	r0,0		; store sign in T
000b45 2d00                      	mov	w,r0		; store formatting character in w
000b46 95c8                      	lpm	
000b47 2da0                      	mov	xl,r0		; load x-pointer with SRAM address
000b48 36a0                      	cpi	xl,0x60
000b49 f010                      	brlo rio_space
                                 dataram_space:		; variable originates from SRAM memory
000b4a e0b2                      	ldi	xh,0x02		;>addresses are limited to 0x0260 through 0x02ff
000b4b c001                      	rjmp space_detect_end	;>that enables automatic detection of the origin
                                 rio_space:			; variable originates from reg or I/O space 
000b4c 27bb                      	clr	xh			; clear high-byte, addresses are 0x0000 through 0x003f (0x005f)
                                 space_detect_end:
000b4d 9631                       	adiw	zl,1	; increment pointer Z
                                 
                                 ;	JB1	w,6,_putdec
                                 ;	JB1	w,5,_putbin
                                 ;	JB1	w,4,_puthex
                                 ;	JB1	w,3,_putfrac
000b4e 3804
000b4f f079                      	JK	w,FCHAR,_putchar
000b50 3805
000b51 f081                      	JK	w,FSTR ,_putstr
000b52 c015                      	rjmp	_putnum
                                 	
000b53 cfe2                      	rjmp	_printf_read	
                                 
                                 ; === putc (put character) ===============================
                                 ; in	w	character to put
                                 ;	e1,e0	address of output routine (UART, LCD putc)
                                 _putw:
000b54 932f
000b55 93ff
000b56 93ef                      	PUSH3	a0,zh,zl
000b57 2de4
000b58 2df5
000b59 2f20                      	MOV3	a0,zh,zl, w,e1,e0
000b5a 9509                      	icall			; indirect call to "putc"
000b5b 91ef
000b5c 91ff
000b5d 912f                      	POP3	a0,zh,zl
000b5e 9508                      	ret
                                 
                                 ; === putchar (put character) ============================
                                 ; in	x	pointer to character to put
                                 _putchar:
000b5f 910c                      	ld	w,x
000b60 dff3                      	rcall	_putw
000b61 cfd4                      	rjmp	_printf_read
                                 	
                                 ; === putstr (put string) ================================
                                 ; in	x	pointer to ascii string
                                 ;	b3,b2	address of output routine (UART, LCD putc)
                                 _putstr:
000b62 910d                      	ld	w,x+
000b63 2300                      	tst	w
000b64 f409                      	brne	PC+2
000b65 cfd0                      	rjmp	_printf_read
000b66 dfed                      	rcall	_putw
000b67 cffa                      	rjmp	_putstr
                                 
                                 ; === putnum (dec/bin/hex/frac) ===========================
                                 ; in	x	pointer to SRAM variable to print
                                 ; 	r0	formatting character
                                 	
                                 _putnum:
000b68 935f
000b69 934f
000b6a 933f
000b6b 932f                      	PUSH4	a3,a2,a1,a0	; safeguard a
000b6c 939f
000b6d 938f
000b6e 937f
000b6f 936f                      	PUSH4	b3,b2,b1,b0	; safeguard b	
000b70 912d
000b71 913d
000b72 914d
000b73 915d                      	LDX4	a3,a2,a1,a0	; load operand to print into a
                                 
                                 ; FDEC	11bb'iiis
                                 ; FBIN	101i'iiis
                                 ; FHEX	1001'iiis
                                 ; FRACT	1000'1bbs
                                 
000b74 fd06
000b75 c006                      	JB1	w,6,_putdec
000b76 fd05
000b77 c00f                      	JB1	w,5,_putbin
000b78 fd04
000b79 c010                      	JB1	w,4,_puthex
000b7a fd03
000b7b c019                      	JB1	w,3,_putfrac
                                 
                                 ; FDEC	11bb'iiis
                                 _putdec:
000b7c e06a                      	ldi	b0,10		; b0 = base (10)
                                 
000b7d 2f70                      	mov	b1,w
000b7e 9576                      	lsr	b1
000b7f 7077                      	andi	b1,0b111	
000b80 9572                      	swap	b1		; b1 = format 0iii'0000 (integer digits)
000b81 e080                      	ldi	b2,0		; b2 = dec. point position = 0 (right)
                                 	
000b82 2f90                      	mov	b3,w
000b83 9592                      	swap	b3
000b84 7093                      	andi	b3,0b11
000b85 9593                      	inc	b3			; b3 = number of bytes (1..4)
000b86 c01a                      	rjmp	_getnum	; get number of digits (iii)
                                 
                                 ; FBIN	101i'iiis	addr
                                 _putbin:	
000b87 e062                      	ldi	b0,2		; b0 = base (2)
000b88 e094                      	ldi	b3,4		; b3 = number of bytes (4)	
000b89 c003                      	rjmp	_getdig	; get number of digits (iii)
                                 
                                 ; FHEX	1001'iiis	addr
                                 _puthex:	
000b8a e160                      	ldi	b0,16		; b0 = base (16)
000b8b e094                      	ldi	b3,4		; b3 = number of bytes (4)
000b8c c000                      	rjmp	_getdig
                                 
                                 _getdig:
000b8d 2f70                      	mov	b1,w
000b8e 9576                      	lsr	b1
000b8f 7077                      	andi	b1,0b111
000b90 f409                      	brne	PC+2
000b91 e078                      	ldi	b1,8		; if b1=0 then 8-digits
000b92 9572                      	swap	b1		; b1 = format 0iii'0000 (integer digits)
000b93 e080                      	ldi	b2, 0		; b2 = dec. point position = 0 (right)
000b94 c00c                      	rjmp	_getnum
                                 
                                 ; FFRAC	1000'1bbs	addr	 00dd'dddd, 	iiii'ffff
                                 	
                                 _putfrac:
000b95 e06a                      	ldi	b0,10		; base=10	
000b96 95c8                      	lpm
000b97 2d80                      	mov	b2,r0		; load dec.point position
000b98 9631                      	adiw	zl,1	; increment char pointer
000b99 95c8                      	lpm
000b9a 2d70                      	mov	b1,r0		; load ii.ff format
000b9b 9631                      	adiw	zl,1	; increment char pointer
                                 	
000b9c 2f90                      	mov	b3,w
000b9d 9595                      	asr	b3
000b9e 7093                      	andi	b3,0b11
000b9f 9593                      	inc	b3			; b3 = number of bytes (1..4)
                                 
000ba0 c000                      	rjmp	_getnum
                                 
                                 _getnum:
                                 ; in 	a	4-byte variable
                                 ; 	b3	number of bytes (1..4)
                                 ;	T	sign, 0=unsigned, 1=signed
                                 
000ba1 3094
000ba2 f081                      	JK	b3,4,_printf_4b
000ba3 3093
000ba4 f051                      	JK	b3,3,_printf_3b
000ba5 3092
000ba6 f021                      	JK	b3,2,_printf_2b	
                                 	
                                 _printf_1b:			; sign extension
000ba7 2733                      	clr	a1
000ba8 f416                      	brtc	PC+3	; T=1 sign extension
000ba9 fd27                      	sbrc	a0,7
000baa ef3f                      	ldi	a1,0xff
                                 _printf_2b:
000bab 2744                      	clr	a2
000bac f416                      	brtc	PC+3	; T=1 sign extension	
000bad fd37                      	sbrc	a1,7
000bae ef4f                      	ldi	a2,0xff
                                 _printf_3b:	
000baf 2755                      	clr	a3
000bb0 f416                      	brtc	PC+3	; T=1 sign extension
000bb1 fd47                      	sbrc	a2,7
000bb2 ef5f                      	ldi	a3,0xff
                                 _printf_4b:
                                 
000bb3 d009                      	rcall	_ftoa		; float to ascii
000bb4 916f
000bb5 917f
000bb6 918f
000bb7 919f                      	POP4	b3,b2,b1,b0	; restore b
000bb8 912f
000bb9 913f
000bba 914f
000bbb 915f                      	POP4	a3,a2,a1,a0	; restore a
                                 	
000bbc cf79                      	rjmp	_printf_read
                                 
                                 ; ===============================================
                                 ; func	ftoa
                                 ; converts a fixed-point fractional number to an ascii string
                                 ; author (c) Raphael Holzer
                                 ;
                                 ; in	a3-a0	variable to print
                                 ;	b0	base, 2 to 36, but usually decimal (10)
                                 ;	b1	number of digits to print ii.ff
                                 ; 	b2	position of the decimal point (0=right, 32=left)
                                 ;	T	sign (T=0 unsiged, T=1 signed)
                                 
                                 _ftoa:
000bbd 92cf                      	push	d0
000bbe 92bf
000bbf 92af
000bc0 929f
000bc1 928f                      	PUSH4	c3,c2,c1,c0	; c = fraction part, a = integer part
000bc2 18bb
000bc3 24aa
000bc4 2499
000bc5 2488                      	CLR4	c3,c2,c1,c0	; clear fraction part
                                 
000bc6 f486                      	brtc	_ftoa_plus	; if T=0 then unsigned
000bc7 94e8                      	clt
000bc8 2355                      	tst	a3				; if MSb(a)=1 then a=-a
000bc9 f46a                      	brpl	_ftoa_plus
000bca 9468                      	set					; T=1 (minus)
000bcb 2377                      	tst	b1
000bcc f009                      	breq	PC+2		; if b1=0 the print ALL digits
000bcd 5170                      	subi	b1,0x10		; decrease int digits
000bce 9550
000bcf 9540
000bd0 9530
000bd1 9520
000bd2 ef0f
000bd3 1b20
000bd4 0b30
000bd5 0b40
000bd6 0b50                      	NEG4	a3,a2,a1,a0	; negate a
                                 _ftoa_plus:	
000bd7 2388                      	tst	b2				; b0=0 (only integer part)
000bd8 f051                      	breq	_ftoa_int	
                                 _ftoa_shift:	
000bd9 9555
000bda 9547
000bdb 9537
000bdc 9527                      	ASR4	a3,a2,a1,a0	; a = integer part	
000bdd 94b7
000bde 94a7
000bdf 9497
000be0 9487                      	ROR4	c3,c2,c1,c0	; c = fraction part
000be1 958a
000be2 f7b1                      	DJNZ	b2,_ftoa_shift
                                 _ftoa_int:
000be3 937f                      	push	b1			; ii.ff (ii=int digits)
000be4 9572                      	swap	b1
000be5 707f                      	andi	b1,0x0f
                                 	
000be6 e20e                      	ldi	w,'.'			; push decimal point
000be7 930f                      	push	w
                                 _ftoa_int1:
000be8 d045                      	rcall	_div41		; int=int/10
000be9 2d0c                      	mov	w,d0			; d=reminder
000bea d030                      	rcall	_hex2asc
000beb 930f                      	push	w			; push rem(int/10)
000bec 2700
000bed 1720
000bee 0730
000bef 0740
000bf0 0750                      	TST4	a3,a2,a1,a0	; (int/10)=?
000bf1 f029                      	breq	_ftoa_space	; (int/10)=0 then finished
000bf2 2377                      	tst	b1
000bf3 f3a1                      	breq	_ftoa_int1	; if b1=0 then print ALL int-digits
000bf4 957a
000bf5 f791                      	DJNZ	b1,_ftoa_int1
000bf6 c007                      	rjmp	_ftoa_sign
                                 _ftoa_space:
000bf7 2377                      	tst	b1				; if b1=0 then print ALL int-digits
000bf8 f029                      	breq	_ftoa_sign
000bf9 957a                      	dec	b1
000bfa f019                      	breq	_ftoa_sign
000bfb e200                      	ldi	w,' '			; write spaces
000bfc df57                      	rcall	_putw	
000bfd cff9                      	rjmp	_ftoa_space
                                 _ftoa_sign:
000bfe f416                      	brtc	PC+3		; if T=1 then write 'minus'
000bff e20d                      	ldi	w,'-'
000c00 df53                      	rcall	_putw
                                 _ftoa_int3:
000c01 910f                      	pop	w
000c02 320e                      	cpi	w,'.'
000c03 f011                      	breq	PC+3
000c04 df4f                      	rcall	_putw
000c05 cffb                      	rjmp	_ftoa_int3
                                 
000c06 917f                      	pop	b1				; ii.ff (ff=frac digits)
000c07 707f                      	andi	b1,0x0f
000c08 2377                      	tst	b1
000c09 f059                      	breq	_ftoa_end
                                 _ftoa_point:	
000c0a df49                      	rcall	_putw		; write decimal point
000c0b 2d28
000c0c 2d39
000c0d 2d4a
000c0e 2d5b                      	MOV4	a3,a2,a1,a0, c3,c2,c1,c0		
                                 _ftoa_frac:
000c0f d011                      	rcall	_mul41		; d.frac=10*frac
000c10 2d0c                      	mov	w,d0
000c11 d009                      	rcall	_hex2asc
000c12 df41                      	rcall	_putw
000c13 957a
000c14 f7d1                      	DJNZ	b1,_ftoa_frac
                                 _ftoa_end:
000c15 908f
000c16 909f
000c17 90af
000c18 90bf                      	POP4	c3,c2,c1,c0
000c19 90cf                      	pop	d0
000c1a 9508                      	ret
                                 
                                 ; === hexadecimal to ascii ===
                                 ; in	w
                                 _hex2asc:
000c1b 300a                      	cpi	w,10
000c1c f410                      	brsh	PC+3
000c1d 5d00                      	addi	w,'0'
000c1e 9508                      	ret
000c1f 5a09                      	addi	w,('a'-10)
000c20 9508                      	ret
                                 
                                 ; === multiply 4byte*1byte ===
                                 ; funct mul41
                                 ; multiplies a3-a0 (4-byte) by b0 (1-byte)
                                 ; author (c) Raphael Holzer, EPFL
                                 ; 
                                 ; in	a3..a0	multiplicand (argument to multiply)
                                 ;	b0	multiplier
                                 ; out	a3..a0	result
                                 ; 	d0	result MSB (byte 4)
                                 ;
000c21 24cc                      _mul41:	clr	d0			; clear byte4 of result
000c22 e200                      	ldi	w,32			; load bit counter
000c23 9488                      __m41:	clc				; clear carry
000c24 fd20                      	sbrc	a0,0		; skip addition if LSB=0
000c25 0ec6                      	add	d0,b0			; add b to MSB of a
000c26 94c7
000c27 9557
000c28 9547
000c29 9537
000c2a 9527                      	ROR5	d0,a3,a2,a1,a0	; shift-right c, LSB (of b) into carry
000c2b 950a
000c2c f7b1                      	DJNZ	w,__m41		; Decrement and Jump if bit-count Not Zero
000c2d 9508                      	ret
                                 
                                 ; === divide 4byte/1byte ===
                                 ; func div41
                                 ; in	a0..a3 	divident (argument to divide)
                                 ;	b0 	divider
                                 ; out	a0..a3 	result 
                                 ;	d0	reminder
                                 ;
000c2e 24cc                      _div41:	clr	d0			; d will contain the remainder
000c2f e200                      	ldi	w,32			; load bit counter
000c30 1f22
000c31 1f33
000c32 1f44
000c33 1f55
000c34 1ccc                      __d41:	ROL5	d0,a3,a2,a1,a0	; shift carry into result c
000c35 1ac6                      	sub	d0, b0			; subtract b from remainder
000c36 f408                      	brcc	PC+2	
000c37 0ec6                      	add	d0, b0			; restore if remainder became negative
000c38 950a
000c39 f7b1                      	DJNZ	w,__d41		; Decrement and Jump if bit-count Not Zero
000c3a 1f22
000c3b 1f33
000c3c 1f44
000c3d 1f55                      	ROL4	a3,a2,a1,a0	; last shift (carry into result c)
000c3e 9550
000c3f 9540
000c40 9530
000c41 9520                      	COM4	a3,a2,a1,a0	; complement result
000c42 9508                      	ret
                                 
                                  mainLCD:	
000c43 de85                      	rcall LCD_clear	
000c44 eb0d
000c45 2e40
000c46 e00a
000c47 2e50
000c48 940e 0b30                 	PRINTF LCD
000c4a 4f48
000c4b 454d
000c4c 414d
000c4d 4544
000c4e 2020
000c4f 4d20
000c50 5241
000c51 4f49
\\files7\data\benand\Microcontrôleurs\Projet\map\map\macros_LCD.asm(14): warning: .cseg .db misalignment - padding zero byte
\\files7\data\benand\Microcontrôleurs\Projet\map\map\Map1Done.asm(36): '\\files7\data\benand\Microcontrôleurs\Projet\map\map\macros_LCD.asm' included form here
000c52 0000                      .db		"HOMEMADE   MARIO",0			;Affichage au lancement du jeu
000c53 dea2                      	rcall LCD_lf						
000c54 eb0d
000c55 2e40
000c56 e00a
000c57 2e50
000c58 940e 0b30                 	PRINTF LCD
000c5a 3a36
000c5b 454e
000c5c 5458
\\files7\data\benand\Microcontrôleurs\Projet\map\map\macros_LCD.asm(17): warning: .cseg .db misalignment - padding zero byte
\\files7\data\benand\Microcontrôleurs\Projet\map\map\Map1Done.asm(36): '\\files7\data\benand\Microcontrôleurs\Projet\map\map\macros_LCD.asm' included form here
000c5d 0000                      .db		"6:NEXT",0
000c5e 9b86                      	sbis PIND, 6						;Il faut appuyer sur le bouton 6 pour accéder au paramètre suivant
000c5f c001                      	rjmp select_sound
000c60 cffd                      	rjmp PC-2
                                 
                                 select_sound:
000c61 de67                      	rcall LCD_clear
000c62 eb0d
000c63 2e40
000c64 e00a
000c65 2e50
000c66 940e 0b30                 	PRINTF LCD							;Menu pour la sélection du niveau de son 
000c68 4553
000c69 454c
000c6a 5443
000c6b 5320
000c6c 554f
000c6d 444e
000c6e 003a                      .db	"SELECT SOUND:",0
000c6f de86                      	rcall LCD_lf
                                 choix_b0:
000c70 e104
000c71 2e30
000c72 e001
000c73 930f
000c74 923f
000c75 e300
000c76 2e30
000c77 e006
000c78 943a
000c79 f7f1
000c7a 943a
000c7b 950a
000c7c f7d9
000c7d 903f
000c7e 910f
000c7f 943a
000c80 f791
000c81 950a
000c82 f781                      	WAIT_MS 20
000c83 de7e                      	rcall encoder						
000c84 3f6f                      	cpi b0, 0xff
000c85 f149                      	breq mise_neuf						;Son réglable du niveau 0 (pas de son) à 9 au moyen de l'encodeur angulaire
000c86 306a                      	cpi b0, 0x0a
000c87 f528                      	brsh mise_zero2
000c88 eb0d
000c89 2e40
000c8a e00a
000c8b 2e50
000c8c 940e 0b30                 	PRINTF LCD
000c8e 4f53
000c8f 4e55
000c90 3a44
000c91 1694
000c92 2020
000c93 3a37
000c94 454e
000c95 5458
\\files7\data\benand\Microcontrôleurs\Projet\map\map\macros_LCD.asm(35): warning: .cseg .db misalignment - padding zero byte
\\files7\data\benand\Microcontrôleurs\Projet\map\map\Map1Done.asm(36): '\\files7\data\benand\Microcontrôleurs\Projet\map\map\macros_LCD.asm' included form here
000c96 0000                      .db "SOUND:",FHEX,b,"  7:NEXT",0
000c97 e104
000c98 2e30
000c99 e001
000c9a 930f
000c9b 923f
000c9c e300
000c9d 2e30
000c9e e006
000c9f 943a
000ca0 f7f1
000ca1 943a
000ca2 950a
000ca3 f7d9
000ca4 903f
000ca5 910f
000ca6 943a
000ca7 f791
000ca8 950a
000ca9 f781                      	WAIT_MS 20
                                 
                                 	;sbis PIND, 5						;Lorsqu'on appuie sur le bouton 5, une musique se lance pour voir le niveau de son correspondant
                                 	;lance musique
000caa 9b87                      	sbis PIND, 7						;Il faut appuyer sur le bouton 7 pour passer au choix du niveau
000cab c009                      	rjmp select_lvl
000cac cfb4                      	rjmp select_sound
                                 
                                 mise_zero2:
000cad e060                      	ldi b0, 0x00
000cae cfc1                      	rjmp choix_b0
                                 mise_neuf:
000caf e069                      	ldi b0, 0x09
000cb0 cfbf                      	rjmp choix_b0						;Sous-routines qui permettent de garder les valeurs voulues entre deux bornes
                                 mise_un:								;avec b0 qui stocke la valeur pour le son et a0 la valeur pour les niveaux
000cb1 e021                      	ldi a0, 0x01
000cb2 c010                      	rjmp choix_a0
                                 mise_deux:
000cb3 e022                      	ldi a0, 0x02
000cb4 c00e                      	rjmp choix_a0
                                 
                                 select_lvl:
000cb5 de13                      	rcall LCD_clear
000cb6 eb0d
000cb7 2e40
000cb8 e00a
000cb9 2e50
000cba 940e 0b30                 	PRINTF LCD							;Menu pour la sélection du niveau
000cbc 4553
000cbd 454c
000cbe 5443
000cbf 4c20
000cc0 4c56
000cc1 003a                      .db		"SELECT LVL:",0
000cc2 de33                      	rcall LCD_lf
                                 choix_a0:
000cc3 e104
000cc4 2e30
000cc5 e001
000cc6 930f
000cc7 923f
000cc8 e300
000cc9 2e30
000cca e006
000ccb 943a
000ccc f7f1
000ccd 943a
000cce 950a
000ccf f7d9
000cd0 903f
000cd1 910f
000cd2 943a
000cd3 f791
000cd4 950a
000cd5 f781                      	WAIT_MS 20
000cd6 de2b                      	rcall encoder
000cd7 3020                      	cpi a0, 0x00
000cd8 f2d1                      	breq mise_deux						;Deux choix de niveau (1 et 2)
000cd9 3023                      	cpi a0, 0x03
000cda f6b0                      	brsh mise_un
000cdb eb0d
000cdc 2e40
000cdd e00a
000cde 2e50
000cdf 940e 0b30                 	PRINTF LCD
000ce1 564c
000ce2 3a4c
000ce3 1294
000ce4 2020
000ce5 2020
000ce6 3a36
000ce7 4c50
000ce8 5941
\\files7\data\benand\Microcontrôleurs\Projet\map\map\macros_LCD.asm(70): warning: .cseg .db misalignment - padding zero byte
\\files7\data\benand\Microcontrôleurs\Projet\map\map\Map1Done.asm(36): '\\files7\data\benand\Microcontrôleurs\Projet\map\map\macros_LCD.asm' included form here
000ce9 0000                      .db	"LVL:",FHEX,a,"    6:PLAY",0
000cea e104
000ceb 2e30
000cec e001
000ced 930f
000cee 923f
000cef e300
000cf0 2e30
000cf1 e006
000cf2 943a
000cf3 f7f1
000cf4 943a
000cf5 950a
000cf6 f7d9
000cf7 903f
000cf8 910f
000cf9 943a
000cfa f791
000cfb 950a
000cfc f781                      	WAIT_MS 20
000cfd 9b86                      	sbis PIND, 6						;Il faut appuyer sur le bouton 6 pour lancer la partie sur le niveau choisi
000cfe c001                      	rjmp affi_lvl
000cff cfb5                      	rjmp select_lvl
                                 
                                 affi_lvl:
000d00 2e92                      	mov r9, a0
000d01 ddc7                      	rcall LCD_clear
000d02 eb0d
000d03 2e40
000d04 e00a
000d05 2e50
000d06 940e 0b30                 	PRINTF LCD							
000d08 4f48
000d09 454d
000d0a 414d
000d0b 4544
000d0c 2020
000d0d 4d20
000d0e 5241
000d0f 4f49
\\files7\data\benand\Microcontrôleurs\Projet\map\map\macros_LCD.asm(80): warning: .cseg .db misalignment - padding zero byte
\\files7\data\benand\Microcontrôleurs\Projet\map\map\Map1Done.asm(36): '\\files7\data\benand\Microcontrôleurs\Projet\map\map\macros_LCD.asm' included form here
000d10 0000                      .db		"HOMEMADE   MARIO",0			;Affichage du LCD lorsque la partie commence
000d11 dde4                      	rcall LCD_lf
000d12 eb0d
000d13 2e40
000d14 e00a
000d15 2e50
000d16 940e 0b30                 	PRINTF LCD
000d18 564c
000d19 3a4c
000d1a 1294
\\files7\data\benand\Microcontrôleurs\Projet\map\map\macros_LCD.asm(83): warning: .cseg .db misalignment - padding zero byte
\\files7\data\benand\Microcontrôleurs\Projet\map\map\Map1Done.asm(36): '\\files7\data\benand\Microcontrôleurs\Projet\map\map\macros_LCD.asm' included form here
000d1b 0000                      .db "LVL:",FHEX,a,0
000d1c 9508                      ; === interrupt service routines ===
                                 ext_int0:
000d1d 940c 0d5d                 	jmp shift_jump
                                 ovf_int0:
000d1f 936f                      	push b0								
000d20 932f                      	push a0
000d21 c00e                      	rjmp refresh_timer
                                 ;===================================
                                 reset:
000d22 94f8                      	cli
000d23 ef0f
000d24 bf0d
000d25 e100
000d26 bf0e                      	LDSP	RAMEND						;Le reset initialise l'écran LCD, l'encodeur et le stack pointer
000d27 940e 0add                 	call	LCD_init					;Le registre r11 est une constante fixée à 60 pour les 60 secondes à décrémenter jusqu'au game over
000d29 940e 0afb                 	call encoder_init
000d2b e30c
000d2c 2eb0                      	_LDI r11, 60	
000d2d 940e 0c43                 	call	mainLCD						;Le main LCD représente l'interface utilisateur où le joueur choisit plusieurs paramètres avant de lancer la partie
000d2f c13c                      	rjmp lancement
                                 ;==================================================================================================================================================================================
                                 ;==================================================================================================================================================================================
                                 ;refresh_timer est la sous-routine d'interruption timer overflow 0
                                 ;Elle permet de limiter en temps la durée du joueur sur un niveau pour ajouter un peu de challenge
                                 refresh_timer:
                                 	;tst r7
                                 	;_BREQ fin_ovf 
000d30 94ba                      	dec r11							
000d31 e000
000d32 16b0                      	_CPI r11, 0x00						;On décrémente le registre r11 jusqu'a ce qu'il atteigne zéro ce qui implique le game over
000d33 f409
000d34 c096                      	_BREQ inter_reset					;pour le joueur.
000d35 2d6b                      	mov b0, r11
000d36 940e 0ac9                 	call LCD_clear
000d38 eb0d
000d39 2e40
000d3a e00a
000d3b 2e50
000d3c 940e 0b30                 	PRINTF LCD
000d3e 4f48
000d3f 454d
000d40 414d
000d41 4544
000d42 2020
000d43 4d20
000d44 5241
000d45 4f49
\\files7\data\benand\Microcontrôleurs\Projet\map\map\Map1Done.asm(66): warning: .cseg .db misalignment - padding zero byte
000d46 0000                      .db		"HOMEMADE   MARIO",0				
000d47 940e 0af6                 	call LCD_lf
000d49 2d29                      	mov a0, r9							;L'affichage est rafraîchi à chaque overflow du timer
000d4a eb0d
000d4b 2e40
000d4c e00a
000d4d 2e50
000d4e 940e 0b30                 	PRINTF LCD
000d50 564c
000d51 3a4c
000d52 1294
000d53 2020
000d54 2020
000d55 2020
000d56 c020
000d57 7316
000d58 0020                      .db "LVL:",FHEX,a,"       ",FDEC,b,"s ",0
                                 fin_ovf:
000d59 912f                      	pop a0
000d5a 916f                      	pop b0
000d5b be1f                      	out SREG, _sreg						;Enfin on restitue les valeurs a0, b0 ainsi que le SREG qui ont pu être altérés par la sous-routine (printf notamment)
000d5c 9518                      	reti
                                 ;==================================================================================================================================================================================
                                 ;==================================================================================================================================================================================
                                 ;shift_jump est la sous-routine d'interruption externe 0
                                 ;Elle permet le décalage de la map d'une colonne à chaque fois que le bouton 0 est pressé, de plus, 
                                 ;elle décale aussi le personnage en mémoire et sur la matrice 
                                 shift_jump:
000d5d e604
000d5e 2e30
000d5f e001
000d60 930f
000d61 923f
000d62 e300
000d63 2e30
000d64 e006
000d65 943a
000d66 f7f1
000d67 943a
000d68 950a
000d69 f7d9
000d6a 903f
000d6b 910f
000d6c 943a
000d6d f791
000d6e 950a
000d6f f781                      	Wait_MS 100
000d70 2ded                      	mov zl, r13							;z pointe sur la LED du personnage 
000d71 2dfc                      	mov zh, r12
000d72 9488                      	clc
000d73 0fe7                      	add zl, b1							;On ajoute 0x18 au byte pour arriver sur la LED à droite du personnage	
000d74 1df2                      	adc zh, r2		
                                 
000d75 8180                      	ld r24, z							;On vérifie que la LED à droite du personnage soit orange 
000d76 fd81                      	sbrc r24, 1							;Si c'est le cas, le personnage est entré en collision avec une LED  orange, il perd la partie
000d77 c023                      	rjmp fin2						;On saute donc à l'affichage du "game over"
                                 
000d78 2788                      	clr r24
000d79 2ede                      	mov	r13, zl							;On sauve la nouvelle position du personnage dans r12 et r13
000d7a 2ecf                      	mov	r12, zh
                                 
000d7b 9281                      	st z+, r8
000d7c 9221                      	st z+, r2							;Ces trois instructions permettent de remplir la nouvelle LED avec les couleurs du personnage
000d7d 9221                      	st z+, r2
                                 
000d7e 9488                      	clc
000d7f 0ee7                      	add r14, b1							;Ici, on décale l'origine du niveau d'une colonne, pour faire "avancer" le personnage 
000d80 1cf2                      	adc r15, r2							;On ajoute donc 0x18 au byte r15:r14 pour que z pointe une colonne plus loin lors de l'affichage
                                 
                                 	;cli								;changer	
000d81 940e 0069                 	call affichage_matrice
000d83 e604
000d84 2e30
000d85 e001
000d86 930f
000d87 923f
000d88 e300
000d89 2e30
000d8a e006
000d8b 943a
000d8c f7f1
000d8d 943a
000d8e 950a
000d8f f7d9
000d90 903f
000d91 910f
000d92 943a
000d93 f791
000d94 950a
000d95 f781                      	WAIT_MS 100
                                 
000d96 c008                      	rjmp descente_int
                                 
                                 fin:
000d97 e001
000d98 2ea0                      	_LDI r10, 0x01						;Ici on charge r10 avec 0x01 pour stoper le saut du personnage si l'interruption à lieu pendant un saut
000d99 be1f                      	out SREG, _sreg						;On rétablit le SREG
000d9a 9518                      	reti
                                 	
                                 fin2:
000d9b e001
000d9c 2e70                      	_LDI r7, 0x01						;Ici on charge r7 avec 0x01 pour 
000d9d be1f                      	out SREG, _sreg						;On rétablit le SREG
000d9e 9518                      	reti							
                                 
                                 descente_int:
000d9f 2ded                      	mov zl, r13							;On fait pointer z sur la nouvelle position du personnage avant qu'il amorce sa descente
000da0 2dfc                      	mov zh, r12
                                 
000da1 9488                      	clc
000da2 1bec                      	sub zl, r28							;Cette partie est similaire à la descente de la sous-routine descente de jump_mario
000da3 09f2                      	sbc zh, r2
                                 
000da4 8180                      	ld r24, z
000da5 fd81                      	sbrc r24,1
000da6 cff0                      	rjmp fin
                                 
000da7 9488                      	clc
000da8 2ded                      	mov zl, r13
000da9 2dfc                      	mov zh, r12
                                 
000daa 9221                      	st z+, r2
000dab 9221                      	st z+, r2
000dac 9221                      	st z+, r2
                                 
000dad 9488                      	clc 
000dae 19e6                      	sub zl, r6
000daf 09f2                      	sbc zh, r2
                                 
000db0 2ede                      	mov r13, zl
000db1 2ecf                      	mov r12, zh
                                 
000db2 9281                      	st z+, r8
000db3 9221                      	st z+, r2
000db4 9221                      	st z+, r2
                                 
                                 	;cli								; changer
000db5 940e 0069                 	call affichage_matrice
                                 	;sei								; changer
000db7 e604
000db8 2e30
000db9 e001
000dba 930f
000dbb 923f
000dbc e300
000dbd 2e30
000dbe e006
000dbf 943a
000dc0 f7f1
000dc1 943a
000dc2 950a
000dc3 f7d9
000dc4 903f
000dc5 910f
000dc6 943a
000dc7 f791
000dc8 950a
000dc9 f781                      	WAIT_MS 100
000dca cfd4                      	rjmp descente_int
                                 ;==================================================================================================================================================================================================================
                                 ;==================================================================================================================================================================================================================
                                 ;Ces deux morceaux de code servent à terminer la partie, que ce soit une victoire ou une défaite
                                 inter_reset:
000dcb 940e 0ac9                 	call LCD_clear						 
000dcd eb0d
000dce 2e40
000dcf e00a
000dd0 2e50
000dd1 940e 0b30                 	PRINTF LCD
000dd3 2020
000dd4 4720
000dd5 4d41
000dd6 2045
000dd7 4f20
000dd8 4556
000dd9 2052
000dda 2020
\\files7\data\benand\Microcontrôleurs\Projet\map\map\Map1Done.asm(163): warning: .cseg .db misalignment - padding zero byte
000ddb 0000                      .db "   GAME  OVER   ",0
                                 	;PLAY_SOUND game_over, 50									;on arrive dans cette partie du programme lorsque le joueur a perdu la partie (collision ou manque de temps)
000ddc e808
000ddd 2e30
000dde e104
000ddf 930f
000de0 923f
000de1 e300
000de2 2e30
000de3 e006
000de4 943a
000de5 f7f1
000de6 943a
000de7 950a
000de8 f7d9
000de9 903f
000dea 910f
000deb 943a
000dec f791
000ded 950a
000dee f781                      	WAIT_MS 5000						;un "game over" est alors affiché sur le LCD
                                 play_again:
000def e000
000df0 2ee0                      	_LDI r14,0x00
000df1 e004
000df2 2ef0                      	_LDI r15, 0x04
000df3 2dee                      	mov zl, r14							;Ici on charge le pointeur z sur le debut du niveau pour nettoyer et "éteindre" la matrice de LEDs
000df4 2dff                      	mov zh, r15
000df5 e400
000df6 e020
000df7 9321
000df8 e020
000df9 9321
000dfa e020
000dfb 9321
000dfc 950a
000dfd f7c1                      	RESET_MAT							
000dfe 940e 0069                 	call affichage_matrice
000e00 912f
000e01 b70d
000e02 3f0f
000e03 f009
000e04 cffb
000e05 2400
000e06 2411
000e07 2422
000e08 2433
000e09 2444
000e0a 2455
000e0b 2466
000e0c 2477
000e0d 2488
000e0e 2499
000e0f 24aa
000e10 24bb
000e11 24cc
000e12 24dd
000e13 24ee
000e14 24ff
000e15 2700
000e16 2711
000e17 2722
000e18 2733
000e19 2744
000e1a 2755
000e1b 2766
000e1c 2777
000e1d 2788
000e1e 2799
000e1f 27aa
000e20 27bb
000e21 27cc
000e22 27dd
000e23 27ee
000e24 27ff
000e25 e000
000e26 bb01
000e27 e000
000e28 b902
000e29 e000
000e2a bf09
000e2b e000
000e2c bf00
000e2d e000
000e2e bf03
000e2f e000
000e30 bf07
000e31 e000
000e32 bf0f                      	CLEARALL							;Le CLEARALL permet de mettre à zéro tous les registres, ainsi que les ports, interrupts et timers avant de pouvoir recommencer la partie 
000e33 ceee                      	rjmp reset
                                 
                                 victory:
000e34 940e 0ac9                 	call LCD_clear
000e36 eb0d
000e37 2e40
000e38 e00a
000e39 2e50
000e3a 940e 0b30                 	PRINTF LCD							;Cet affichage est produit lorsque le joueur parvient au bout du niveau
000e3c 5920
000e3d 554f
000e3e 2020
000e3f 4f43
000e40 504d
000e41 454c
000e42 4554
000e43 2044
\\files7\data\benand\Microcontrôleurs\Projet\map\map\Map1Done.asm(179): warning: .cseg .db misalignment - padding zero byte
000e44 0000                      .db " YOU  COMPLETED ",0
                                 	;PLAY_SOUND level_complete, 50
000e45 940e 0af6                 	call LCD_lf
000e47 2d29                      	mov a0, r9
000e48 eb0d
000e49 2e40
000e4a e00a
000e4b 2e50
000e4c 940e 0b30                 	PRINTF LCD
000e4e 2020
000e4f 2020
000e50 454c
000e51 4556
000e52 204c
000e53 1294
000e54 2020
000e55 2020
\\files7\data\benand\Microcontrôleurs\Projet\map\map\Map1Done.asm(184): warning: .cseg .db misalignment - padding zero byte
000e56 0000                      .db "    LEVEL ",FHEX,a,"    ",0
000e57 2722                      	clr a0
000e58 e808
000e59 2e30
000e5a e104
000e5b 930f
000e5c 923f
000e5d e300
000e5e 2e30
000e5f e006
000e60 943a
000e61 f7f1
000e62 943a
000e63 950a
000e64 f7d9
000e65 903f
000e66 910f
000e67 943a
000e68 f791
000e69 950a
000e6a f781                      	WAIT_MS 5000
000e6b cf83                      	rjmp play_again						;A la fin de l'affichage, on saute à "play_again" pour mettre à zéro comme lors de la défaite du joueur
                                 ;==================================================================================================================================================================================================================
                                 ;==================================================================================================================================================================================================================
                                 ;Partie lancement de la partie
                                 ;Initialisation des différents ports et registres nécessaires au bon fonctionnement du jeu
                                 lancement:
000e6c 940e 0023                 	call	ws2812b4_init				; initialise la matrice de LEDs 
000e6e e000
000e6f bb01                      	OUTI	DDRD, 0x00					; Connecte les boutons du port D en mode entrée
000e70 9aba                      	sbi	DDRB, SPEAKER					;changer
000e71 e001
000e72 bf09                      	OUTI	EIMSK, 0b00000001			;On autorise l'interruption externe 0
000e73 e008
000e74 bf00                      	OUTI ASSR, (1<<AS0)					;On choisit le quartz horloger
000e75 e005
000e76 bf03                      	OUTI TCCR0, 5						;ainsi qu'un prescaler à 5 pour obtenir un overflow toutes les secondes
000e77 e001
000e78 bf07                      	OUTI TIMSK, (1<<TOIE0)				;On autorise le timer overflow interrupt 0
000e79 e000
000e7a 2e20                      	_LDI r2, 0x00
000e7b e003
000e7c 2fc0                      	_LDI r28, 0x03						;Constantes utilisés lors de l'exécution du programme
000e7d e006
000e7e 2e60                      	_LDI r6, 0x06
000e7f e10c
000e80 2e80                      	_LDI r8, 0x1c
                                 ;==================================================================================================================================================================================================================
                                 ;==================================================================================================================================================================================================================
                                 ;Partie chargement de la map
                                 main:
000e81 e0e0                      	ldi zl,low(0x0400)
000e82 e0f4                      	ldi zh,high(0x0400)					;On fait pointer le pointeur z à l'adresse 0x0400 de la memoire, là où sera sauvegardé le niveau à afficher
000e83 2eee                      	mov r14, zl
000e84 2eff                      	mov r15, zh							;On sauve dans les registres le "début" du niveau, utilisés dans d'autres parties du code
                                 
000e85 fe90                      	sbrs r9, 0
000e86 c001                      	rjmp map2							;Selon le choix fait avec l'encodeur angulaire, on place le niveau 1 ou 2 en mémoire
000e87 c6a3                      	rjmp map1
                                 map2:
000e88 e001
000e89 e026
000e8a 9321
000e8b e12c
000e8c 9321
000e8d e020
000e8e 9321
000e8f 950a
000e90 f7c1
000e91 e12c
000e92 9321
000e93 e020
000e94 9321
000e95 e020
000e96 9321
000e97 e006
000e98 e020
000e99 9321
000e9a e020
000e9b 9321
000e9c e020
000e9d 9321
000e9e 950a
000e9f f7c1
000ea0 e001
000ea1 e026
000ea2 9321
000ea3 e12c
000ea4 9321
000ea5 e020
000ea6 9321
000ea7 950a
000ea8 f7c1
000ea9 e007
000eaa e020
000eab 9321
000eac e020
000ead 9321
000eae e020
000eaf 9321
000eb0 950a
000eb1 f7c1
000eb2 e001
000eb3 e026
000eb4 9321
000eb5 e12c
000eb6 9321
000eb7 e020
000eb8 9321
000eb9 950a
000eba f7c1
000ebb e007
000ebc e020
000ebd 9321
000ebe e020
000ebf 9321
000ec0 e020
000ec1 9321
000ec2 950a
000ec3 f7c1
000ec4 e002
000ec5 e026
000ec6 9321
000ec7 e12c
000ec8 9321
000ec9 e020
000eca 9321
000ecb 950a
000ecc f7c1
000ecd e003
000ece e020
000ecf 9321
000ed0 e020
000ed1 9321
000ed2 e020
000ed3 9321
000ed4 950a
000ed5 f7c1
000ed6 e003
000ed7 e026
000ed8 9321
000ed9 e12c
000eda 9321
000edb e020
000edc 9321
000edd 950a
000ede f7c1
000edf e002
000ee0 e026
000ee1 9321
000ee2 e12c
000ee3 9321
000ee4 e020
000ee5 9321
000ee6 950a
000ee7 f7c1
000ee8 e003
000ee9 e020
000eea 9321
000eeb e020
000eec 9321
000eed e020
000eee 9321
000eef 950a
000ef0 f7c1
000ef1 e003
000ef2 e026
000ef3 9321
000ef4 e12c
000ef5 9321
000ef6 e020
000ef7 9321
000ef8 950a
000ef9 f7c1
000efa e003
000efb e026
000efc 9321
000efd e12c
000efe 9321
000eff e020
000f00 9321
000f01 950a
000f02 f7c1
000f03 e003
000f04 e020
000f05 9321
000f06 e020
000f07 9321
000f08 e020
000f09 9321
000f0a 950a
000f0b f7c1
000f0c e002
000f0d e026
000f0e 9321
000f0f e12c
000f10 9321
000f11 e020
000f12 9321
000f13 950a
000f14 f7c1
000f15 e003
000f16 e026
000f17 9321
000f18 e12c
000f19 9321
000f1a e020
000f1b 9321
000f1c 950a
000f1d f7c1
000f1e e003
000f1f e020
000f20 9321
000f21 e020
000f22 9321
000f23 e020
000f24 9321
000f25 950a
000f26 f7c1
000f27 e002
000f28 e026
000f29 9321
000f2a e12c
000f2b 9321
000f2c e020
000f2d 9321
000f2e 950a
000f2f f7c1
000f30 e004
000f31 e026
000f32 9321
000f33 e12c
000f34 9321
000f35 e020
000f36 9321
000f37 950a
000f38 f7c1
000f39 e003
000f3a e020
000f3b 9321
000f3c e020
000f3d 9321
000f3e e020
000f3f 9321
000f40 950a
000f41 f7c1
000f42 e001
000f43 e026
000f44 9321
000f45 e12c
000f46 9321
000f47 e020
000f48 9321
000f49 950a
000f4a f7c1
000f4b e004
000f4c e026
000f4d 9321
000f4e e12c
000f4f 9321
000f50 e020
000f51 9321
000f52 950a
000f53 f7c1
000f54 e003
000f55 e020
000f56 9321
000f57 e020
000f58 9321
000f59 e020
000f5a 9321
000f5b 950a
000f5c f7c1
000f5d e001
000f5e e026
000f5f 9321
000f60 e12c
000f61 9321
000f62 e020
000f63 9321
000f64 950a
000f65 f7c1
000f66 e005
000f67 e026
000f68 9321
000f69 e12c
000f6a 9321
000f6b e020
000f6c 9321
000f6d 950a
000f6e f7c1
000f6f e003
000f70 e020
000f71 9321
000f72 e020
000f73 9321
000f74 e020
000f75 9321
000f76 950a
000f77 f7c1
000f78 e005
000f79 e026
000f7a 9321
000f7b e12c
000f7c 9321
000f7d e020
000f7e 9321
000f7f 950a
000f80 f7c1
000f81 e003
000f82 e020
000f83 9321
000f84 e020
000f85 9321
000f86 e020
000f87 9321
000f88 950a
000f89 f7c1
000f8a e004
000f8b e026
000f8c 9321
000f8d e12c
000f8e 9321
000f8f e020
000f90 9321
000f91 950a
000f92 f7c1
000f93 e002
000f94 e020
000f95 9321
000f96 e020
000f97 9321
000f98 e020
000f99 9321
000f9a 950a
000f9b f7c1
000f9c e002
000f9d e026
000f9e 9321
000f9f e12c
000fa0 9321
000fa1 e020
000fa2 9321
000fa3 950a
000fa4 f7c1
000fa5 e004
000fa6 e026
000fa7 9321
000fa8 e12c
000fa9 9321
000faa e020
000fab 9321
000fac 950a
000fad f7c1
000fae e002
000faf e020
000fb0 9321
000fb1 e020
000fb2 9321
000fb3 e020
000fb4 9321
000fb5 950a
000fb6 f7c1
000fb7 e002
000fb8 e026
000fb9 9321
000fba e12c
000fbb 9321
000fbc e020
000fbd 9321
000fbe 950a
000fbf f7c1
000fc0 e003
000fc1 e026
000fc2 9321
000fc3 e12c
000fc4 9321
000fc5 e020
000fc6 9321
000fc7 950a
000fc8 f7c1
000fc9 e002
000fca e020
000fcb 9321
000fcc e020
000fcd 9321
000fce e020
000fcf 9321
000fd0 950a
000fd1 f7c1
000fd2 e003
000fd3 e026
000fd4 9321
000fd5 e12c
000fd6 9321
000fd7 e020
000fd8 9321
000fd9 950a
000fda f7c1
000fdb e003
000fdc e026
000fdd 9321
000fde e12c
000fdf 9321
000fe0 e020
000fe1 9321
000fe2 950a
000fe3 f7c1
000fe4 e002
000fe5 e020
000fe6 9321
000fe7 e020
000fe8 9321
000fe9 e020
000fea 9321
000feb 950a
000fec f7c1
000fed e003
000fee e026
000fef 9321
000ff0 e12c
000ff1 9321
000ff2 e020
000ff3 9321
000ff4 950a
000ff5 f7c1
000ff6 e002
000ff7 e026
000ff8 9321
000ff9 e12c
000ffa 9321
000ffb e020
000ffc 9321
000ffd 950a
000ffe f7c1
000fff e002
001000 e020
001001 9321
001002 e020
001003 9321
001004 e020
001005 9321
001006 950a
001007 f7c1
001008 e004
001009 e026
00100a 9321
00100b e12c
00100c 9321
00100d e020
00100e 9321
00100f 950a
001010 f7c1
001011 e002
001012 e026
001013 9321
001014 e12c
001015 9321
001016 e020
001017 9321
001018 950a
001019 f7c1
00101a e002
00101b e020
00101c 9321
00101d e020
00101e 9321
00101f e020
001020 9321
001021 950a
001022 f7c1
001023 e004
001024 e026
001025 9321
001026 e12c
001027 9321
001028 e020
001029 9321
00102a 950a
00102b f7c1
00102c e001
00102d e026
00102e 9321
00102f e12c
001030 9321
001031 e020
001032 9321
001033 950a
001034 f7c1
001035 e007
001036 e020
001037 9321
001038 e020
001039 9321
00103a e020
00103b 9321
00103c 950a
00103d f7c1
00103e e001
00103f e026
001040 9321
001041 e12c
001042 9321
001043 e020
001044 9321
001045 950a
001046 f7c1
001047 e007
001048 e020
001049 9321
00104a e020
00104b 9321
00104c e020
00104d 9321
00104e 950a
00104f f7c1
001050 e003
001051 e026
001052 9321
001053 e12c
001054 9321
001055 e020
001056 9321
001057 950a
001058 f7c1
001059 e002
00105a e020
00105b 9321
00105c e020
00105d 9321
00105e e020
00105f 9321
001060 950a
001061 f7c1
001062 e003
001063 e026
001064 9321
001065 e12c
001066 9321
001067 e020
001068 9321
001069 950a
00106a f7c1
00106b e003
00106c e026
00106d 9321
00106e e12c
00106f 9321
001070 e020
001071 9321
001072 950a
001073 f7c1
001074 e002
001075 e020
001076 9321
001077 e020
001078 9321
001079 e020
00107a 9321
00107b 950a
00107c f7c1
00107d e003
00107e e026
00107f 9321
001080 e12c
001081 9321
001082 e020
001083 9321
001084 950a
001085 f7c1
001086 e001
001087 e026
001088 9321
001089 e12c
00108a 9321
00108b e020
00108c 9321
00108d 950a
00108e f7c1
00108f e007
001090 e020
001091 9321
001092 e020
001093 9321
001094 e020
001095 9321
001096 950a
001097 f7c1
001098 e001
001099 e026
00109a 9321
00109b e12c
00109c 9321
00109d e020
00109e 9321
00109f 950a
0010a0 f7c1
0010a1 e007
0010a2 e020
0010a3 9321
0010a4 e020
0010a5 9321
0010a6 e020
0010a7 9321
0010a8 950a
0010a9 f7c1
0010aa e001
0010ab e026
0010ac 9321
0010ad e12c
0010ae 9321
0010af e020
0010b0 9321
0010b1 950a
0010b2 f7c1
0010b3 e001
0010b4 e020
0010b5 9321
0010b6 e020
0010b7 9321
0010b8 e020
0010b9 9321
0010ba 950a
0010bb f7c1
0010bc e001
0010bd e026
0010be 9321
0010bf e12c
0010c0 9321
0010c1 e020
0010c2 9321
0010c3 950a
0010c4 f7c1
0010c5 e005
0010c6 e020
0010c7 9321
0010c8 e020
0010c9 9321
0010ca e020
0010cb 9321
0010cc 950a
0010cd f7c1
0010ce e001
0010cf e026
0010d0 9321
0010d1 e12c
0010d2 9321
0010d3 e020
0010d4 9321
0010d5 950a
0010d6 f7c1
0010d7 e001
0010d8 e020
0010d9 9321
0010da e020
0010db 9321
0010dc e020
0010dd 9321
0010de 950a
0010df f7c1
0010e0 e001
0010e1 e026
0010e2 9321
0010e3 e12c
0010e4 9321
0010e5 e020
0010e6 9321
0010e7 950a
0010e8 f7c1
0010e9 e005
0010ea e020
0010eb 9321
0010ec e020
0010ed 9321
0010ee e020
0010ef 9321
0010f0 950a
0010f1 f7c1
0010f2 e001
0010f3 e026
0010f4 9321
0010f5 e12c
0010f6 9321
0010f7 e020
0010f8 9321
0010f9 950a
0010fa f7c1
0010fb e004
0010fc e020
0010fd 9321
0010fe e020
0010ff 9321
001100 e020
001101 9321
001102 950a
001103 f7c1
001104 e001
001105 e026
001106 9321
001107 e12c
001108 9321
001109 e020
00110a 9321
00110b 950a
00110c f7c1
00110d e002
00110e e020
00110f 9321
001110 e020
001111 9321
001112 e020
001113 9321
001114 950a
001115 f7c1
001116 e001
001117 e026
001118 9321
001119 e12c
00111a 9321
00111b e020
00111c 9321
00111d 950a
00111e f7c1
00111f e004
001120 e020
001121 9321
001122 e020
001123 9321
001124 e020
001125 9321
001126 950a
001127 f7c1
001128 e001
001129 e026
00112a 9321
00112b e12c
00112c 9321
00112d e020
00112e 9321
00112f 950a
001130 f7c1
001131 e002
001132 e020
001133 9321
001134 e020
001135 9321
001136 e020
001137 9321
001138 950a
001139 f7c1
00113a e001
00113b e026
00113c 9321
00113d e12c
00113e 9321
00113f e020
001140 9321
001141 950a
001142 f7c1
001143 e002
001144 e020
001145 9321
001146 e020
001147 9321
001148 e020
001149 9321
00114a 950a
00114b f7c1
00114c e001
00114d e026
00114e 9321
00114f e12c
001150 9321
001151 e020
001152 9321
001153 950a
001154 f7c1
001155 e004
001156 e020
001157 9321
001158 e020
001159 9321
00115a e020
00115b 9321
00115c 950a
00115d f7c1
00115e e001
00115f e026
001160 9321
001161 e12c
001162 9321
001163 e020
001164 9321
001165 950a
001166 f7c1
001167 e002
001168 e020
001169 9321
00116a e020
00116b 9321
00116c e020
00116d 9321
00116e 950a
00116f f7c1
001170 e001
001171 e026
001172 9321
001173 e12c
001174 9321
001175 e020
001176 9321
001177 950a
001178 f7c1
001179 e004
00117a e020
00117b 9321
00117c e020
00117d 9321
00117e e020
00117f 9321
001180 950a
001181 f7c1
001182 e007
001183 e026
001184 9321
001185 e12c
001186 9321
001187 e020
001188 9321
001189 950a
00118a f7c1
00118b e001
00118c e020
00118d 9321
00118e e020
00118f 9321
001190 e020
001191 9321
001192 950a
001193 f7c1
001194 e002
001195 e026
001196 9321
001197 e12c
001198 9321
001199 e020
00119a 9321
00119b 950a
00119c f7c1
00119d e003
00119e e020
00119f 9321
0011a0 e020
0011a1 9321
0011a2 e020
0011a3 9321
0011a4 950a
0011a5 f7c1
0011a6 e002
0011a7 e026
0011a8 9321
0011a9 e12c
0011aa 9321
0011ab e020
0011ac 9321
0011ad 950a
0011ae f7c1
0011af e001
0011b0 e020
0011b1 9321
0011b2 e020
0011b3 9321
0011b4 e020
0011b5 9321
0011b6 950a
0011b7 f7c1
0011b8 e001
0011b9 e026
0011ba 9321
0011bb e12c
0011bc 9321
0011bd e020
0011be 9321
0011bf 950a
0011c0 f7c1
0011c1 e005
0011c2 e020
0011c3 9321
0011c4 e020
0011c5 9321
0011c6 e020
0011c7 9321
0011c8 950a
0011c9 f7c1
0011ca e001
0011cb e026
0011cc 9321
0011cd e12c
0011ce 9321
0011cf e020
0011d0 9321
0011d1 950a
0011d2 f7c1
0011d3 e001
0011d4 e020
0011d5 9321
0011d6 e020
0011d7 9321
0011d8 e020
0011d9 9321
0011da 950a
0011db f7c1
0011dc e002
0011dd e026
0011de 9321
0011df e12c
0011e0 9321
0011e1 e020
0011e2 9321
0011e3 950a
0011e4 f7c1
0011e5 e003
0011e6 e020
0011e7 9321
0011e8 e020
0011e9 9321
0011ea e020
0011eb 9321
0011ec 950a
0011ed f7c1
0011ee e002
0011ef e026
0011f0 9321
0011f1 e12c
0011f2 9321
0011f3 e020
0011f4 9321
0011f5 950a
0011f6 f7c1
0011f7 e001
0011f8 e020
0011f9 9321
0011fa e020
0011fb 9321
0011fc e020
0011fd 9321
0011fe 950a
0011ff f7c1
001200 e006
001201 e026
001202 9321
001203 e12c
001204 9321
001205 e020
001206 9321
001207 950a
001208 f7c1
001209 e002
00120a e020
00120b 9321
00120c e020
00120d 9321
00120e e020
00120f 9321
001210 950a
001211 f7c1
001212 e006
001213 e026
001214 9321
001215 e12c
001216 9321
001217 e020
001218 9321
001219 950a
00121a f7c1
00121b e002
00121c e020
00121d 9321
00121e e020
00121f 9321
001220 e020
001221 9321
001222 950a
001223 f7c1
001224 e005
001225 e026
001226 9321
001227 e12c
001228 9321
001229 e020
00122a 9321
00122b 950a
00122c f7c1
00122d e003
00122e e020
00122f 9321
001230 e020
001231 9321
001232 e020
001233 9321
001234 950a
001235 f7c1
001236 e005
001237 e026
001238 9321
001239 e12c
00123a 9321
00123b e020
00123c 9321
00123d 950a
00123e f7c1
00123f e003
001240 e020
001241 9321
001242 e020
001243 9321
001244 e020
001245 9321
001246 950a
001247 f7c1
001248 e004
001249 e026
00124a 9321
00124b e12c
00124c 9321
00124d e020
00124e 9321
00124f 950a
001250 f7c1
001251 e004
001252 e020
001253 9321
001254 e020
001255 9321
001256 e020
001257 9321
001258 950a
001259 f7c1
00125a e004
00125b e026
00125c 9321
00125d e12c
00125e 9321
00125f e020
001260 9321
001261 950a
001262 f7c1
001263 e004
001264 e020
001265 9321
001266 e020
001267 9321
001268 e020
001269 9321
00126a 950a
00126b f7c1
00126c e003
00126d e026
00126e 9321
00126f e12c
001270 9321
001271 e020
001272 9321
001273 950a
001274 f7c1
001275 e005
001276 e020
001277 9321
001278 e020
001279 9321
00127a e020
00127b 9321
00127c 950a
00127d f7c1
00127e e003
00127f e026
001280 9321
001281 e12c
001282 9321
001283 e020
001284 9321
001285 950a
001286 f7c1
001287 e005
001288 e020
001289 9321
00128a e020
00128b 9321
00128c e020
00128d 9321
00128e 950a
00128f f7c1
001290 e002
001291 e026
001292 9321
001293 e12c
001294 9321
001295 e020
001296 9321
001297 950a
001298 f7c1
001299 e006
00129a e020
00129b 9321
00129c e020
00129d 9321
00129e e020
00129f 9321
0012a0 950a
0012a1 f7c1
0012a2 e002
0012a3 e026
0012a4 9321
0012a5 e12c
0012a6 9321
0012a7 e020
0012a8 9321
0012a9 950a
0012aa f7c1
0012ab e006
0012ac e020
0012ad 9321
0012ae e020
0012af 9321
0012b0 e020
0012b1 9321
0012b2 950a
0012b3 f7c1
0012b4 e001
0012b5 e026
0012b6 9321
0012b7 e12c
0012b8 9321
0012b9 e020
0012ba 9321
0012bb 950a
0012bc f7c1
0012bd e007
0012be e020
0012bf 9321
0012c0 e020
0012c1 9321
0012c2 e020
0012c3 9321
0012c4 950a
0012c5 f7c1
0012c6 e001
0012c7 e026
0012c8 9321
0012c9 e12c
0012ca 9321
0012cb e020
0012cc 9321
0012cd 950a
0012ce f7c1
0012cf e007
0012d0 e020
0012d1 9321
0012d2 e020
0012d3 9321
0012d4 e020
0012d5 9321
0012d6 950a
0012d7 f7c1
0012d8 e001
0012d9 e026
0012da 9321
0012db e12c
0012dc 9321
0012dd e020
0012de 9321
0012df 950a
0012e0 f7c1
0012e1 e002
0012e2 e020
0012e3 9321
0012e4 e020
0012e5 9321
0012e6 e020
0012e7 9321
0012e8 950a
0012e9 f7c1
0012ea e005
0012eb e026
0012ec 9321
0012ed e12c
0012ee 9321
0012ef e020
0012f0 9321
0012f1 950a
0012f2 f7c1
0012f3 e001
0012f4 e026
0012f5 9321
0012f6 e12c
0012f7 9321
0012f8 e020
0012f9 9321
0012fa 950a
0012fb f7c1
0012fc e002
0012fd e020
0012fe 9321
0012ff e020
001300 9321
001301 e020
001302 9321
001303 950a
001304 f7c1
001305 e001
001306 e026
001307 9321
001308 e12c
001309 9321
00130a e020
00130b 9321
00130c 950a
00130d f7c1
00130e e001
00130f e020
001310 9321
001311 e020
001312 9321
001313 e020
001314 9321
001315 950a
001316 f7c1
001317 e001
001318 e026
001319 9321
00131a e12c
00131b 9321
00131c e020
00131d 9321
00131e 950a
00131f f7c1
001320 e001
001321 e020
001322 9321
001323 e020
001324 9321
001325 e020
001326 9321
001327 950a
001328 f7c1
001329 e001
00132a e026
00132b 9321
00132c e12c
00132d 9321
00132e e020
00132f 9321
001330 950a
001331 f7c1
001332 e001
001333 e026
001334 9321
001335 e12c
001336 9321
001337 e020
001338 9321
001339 950a
00133a f7c1
00133b e002
00133c e020
00133d 9321
00133e e020
00133f 9321
001340 e020
001341 9321
001342 950a
001343 f7c1
001344 e001
001345 e026
001346 9321
001347 e12c
001348 9321
001349 e020
00134a 9321
00134b 950a
00134c f7c1
00134d e003
00134e e020
00134f 9321
001350 e020
001351 9321
001352 e020
001353 9321
001354 950a
001355 f7c1
001356 e001
001357 e026
001358 9321
001359 e12c
00135a 9321
00135b e020
00135c 9321
00135d 950a
00135e f7c1
00135f e001
001360 e026
001361 9321
001362 e12c
001363 9321
001364 e020
001365 9321
001366 950a
001367 f7c1
001368 e007
001369 e020
00136a 9321
00136b e020
00136c 9321
00136d e020
00136e 9321
00136f 950a
001370 f7c1
001371 e001
001372 e026
001373 9321
001374 e12c
001375 9321
001376 e020
001377 9321
001378 950a
001379 f7c1
00137a e002
00137b e020
00137c 9321
00137d e020
00137e 9321
00137f e020
001380 9321
001381 950a
001382 f7c1
001383 e005
001384 e026
001385 9321
001386 e12c
001387 9321
001388 e020
001389 9321
00138a 950a
00138b f7c1
00138c e001
00138d e026
00138e 9321
00138f e12c
001390 9321
001391 e020
001392 9321
001393 950a
001394 f7c1
001395 e004
001396 e020
001397 9321
001398 e020
001399 9321
00139a e020
00139b 9321
00139c 950a
00139d f7c1
00139e e002
00139f e026
0013a0 9321
0013a1 e12c
0013a2 9321
0013a3 e020
0013a4 9321
0013a5 950a
0013a6 f7c1
0013a7 e001
0013a8 e020
0013a9 9321
0013aa e020
0013ab 9321
0013ac e020
0013ad 9321
0013ae 950a
0013af f7c1
0013b0 e001
0013b1 e026
0013b2 9321
0013b3 e12c
0013b4 9321
0013b5 e020
0013b6 9321
0013b7 950a
0013b8 f7c1
0013b9 e003
0013ba e020
0013bb 9321
0013bc e020
0013bd 9321
0013be e020
0013bf 9321
0013c0 950a
0013c1 f7c1
0013c2 e002
0013c3 e026
0013c4 9321
0013c5 e12c
0013c6 9321
0013c7 e020
0013c8 9321
0013c9 950a
0013ca f7c1
0013cb e002
0013cc e020
0013cd 9321
0013ce e020
0013cf 9321
0013d0 e020
0013d1 9321
0013d2 950a
0013d3 f7c1
0013d4 e001
0013d5 e026
0013d6 9321
0013d7 e12c
0013d8 9321
0013d9 e020
0013da 9321
0013db 950a
0013dc f7c1
0013dd e002
0013de e020
0013df 9321
0013e0 e020
0013e1 9321
0013e2 e020
0013e3 9321
0013e4 950a
0013e5 f7c1
0013e6 e005
0013e7 e026
0013e8 9321
0013e9 e12c
0013ea 9321
0013eb e020
0013ec 9321
0013ed 950a
0013ee f7c1
0013ef e001
0013f0 e026
0013f1 9321
0013f2 e12c
0013f3 9321
0013f4 e020
0013f5 9321
0013f6 950a
0013f7 f7c1
0013f8 e007
0013f9 e020
0013fa 9321
0013fb e020
0013fc 9321
0013fd e020
0013fe 9321
0013ff 950a
001400 f7c1
001401 e001
001402 e026
001403 9321
001404 e12c
001405 9321
001406 e020
001407 9321
001408 950a
001409 f7c1
00140a e002
00140b e020
00140c 9321
00140d e020
00140e 9321
00140f e020
001410 9321
001411 950a
001412 f7c1
001413 e005
001414 e026
001415 9321
001416 e12c
001417 9321
001418 e020
001419 9321
00141a 950a
00141b f7c1
00141c e001
00141d e026
00141e 9321
00141f e12c
001420 9321
001421 e020
001422 9321
001423 950a
001424 f7c1
001425 e002
001426 e020
001427 9321
001428 e020
001429 9321
00142a e020
00142b 9321
00142c 950a
00142d f7c1
00142e e001
00142f e026
001430 9321
001431 e12c
001432 9321
001433 e020
001434 9321
001435 950a
001436 f7c1
001437 e003
001438 e020
001439 9321
00143a e020
00143b 9321
00143c e020
00143d 9321
00143e 950a
00143f f7c1
001440 e001
001441 e026
001442 9321
001443 e12c
001444 9321
001445 e020
001446 9321
001447 950a
001448 f7c1
001449 e001
00144a e026
00144b 9321
00144c e12c
00144d 9321
00144e e020
00144f 9321
001450 950a
001451 f7c1
001452 e003
001453 e020
001454 9321
001455 e020
001456 9321
001457 e020
001458 9321
001459 950a
00145a f7c1
00145b e003
00145c e026
00145d 9321
00145e e12c
00145f 9321
001460 e020
001461 9321
001462 950a
001463 f7c1
001464 e001
001465 e020
001466 9321
001467 e020
001468 9321
001469 e020
00146a 9321
00146b 950a
00146c f7c1
00146d e001
00146e e026
00146f 9321
001470 e12c
001471 9321
001472 e020
001473 9321
001474 950a
001475 f7c1
001476 e007
001477 e020
001478 9321
001479 e020
00147a 9321
00147b e020
00147c 9321
00147d 950a
00147e f7c1
00147f e001
001480 e026
001481 9321
001482 e12c
001483 9321
001484 e020
001485 9321
001486 950a
001487 f7c1
001488 e001
001489 e020
00148a 9321
00148b e020
00148c 9321
00148d e020
00148e 9321
00148f 950a
001490 f7c1
001491 e001
001492 e026
001493 9321
001494 e12c
001495 9321
001496 e020
001497 9321
001498 950a
001499 f7c1
00149a e001
00149b e020
00149c 9321
00149d e020
00149e 9321
00149f e020
0014a0 9321
0014a1 950a
0014a2 f7c1
0014a3 e004
0014a4 e026
0014a5 9321
0014a6 e12c
0014a7 9321
0014a8 e020
0014a9 9321
0014aa 950a
0014ab f7c1
0014ac e001
0014ad e026
0014ae 9321
0014af e12c
0014b0 9321
0014b1 e020
0014b2 9321
0014b3 950a
0014b4 f7c1
0014b5 e007
0014b6 e020
0014b7 9321
0014b8 e020
0014b9 9321
0014ba e020
0014bb 9321
0014bc 950a
0014bd f7c1
0014be e001
0014bf e026
0014c0 9321
0014c1 e12c
0014c2 9321
0014c3 e020
0014c4 9321
0014c5 950a
0014c6 f7c1
0014c7 e007
0014c8 e020
0014c9 9321
0014ca e020
0014cb 9321
0014cc e020
0014cd 9321
0014ce 950a
0014cf f7c1
0014d0 e001
0014d1 e026
0014d2 9321
0014d3 e12c
0014d4 9321
0014d5 e020
0014d6 9321
0014d7 950a
0014d8 f7c1
0014d9 e007
0014da e020
0014db 9321
0014dc e020
0014dd 9321
0014de e020
0014df 9321
0014e0 950a
0014e1 f7c1
0014e2 e001
0014e3 e026
0014e4 9321
0014e5 e12c
0014e6 9321
0014e7 e020
0014e8 9321
0014e9 950a
0014ea f7c1
0014eb e007
0014ec e020
0014ed 9321
0014ee e020
0014ef 9321
0014f0 e020
0014f1 9321
0014f2 950a
0014f3 f7c1
0014f4 e001
0014f5 e026
0014f6 9321
0014f7 e12c
0014f8 9321
0014f9 e020
0014fa 9321
0014fb 950a
0014fc f7c1
0014fd e007
0014fe e020
0014ff 9321
001500 e020
001501 9321
001502 e020
001503 9321
001504 950a
001505 f7c1
001506 e001
001507 e026
001508 9321
001509 e12c
00150a 9321
00150b e020
00150c 9321
00150d 950a
00150e f7c1
00150f e007
001510 e020
001511 9321
001512 e020
001513 9321
001514 e020
001515 9321
001516 950a
001517 f7c1
001518 e001
001519 e026
00151a 9321
00151b e12c
00151c 9321
00151d e020
00151e 9321
00151f 950a
001520 f7c1
001521 e007
001522 e020
001523 9321
001524 e020
001525 9321
001526 e020
001527 9321
001528 950a
001529 f7c1                      	LEVEL2
00152a c5ca                      	rjmp restart
                                 map1:
00152b e001
00152c e026
00152d 9321
00152e e12c
00152f 9321
001530 e020
001531 9321
001532 950a
001533 f7c1
001534 e12c
001535 9321
001536 e020
001537 9321
001538 e020
001539 9321
00153a e006
00153b e020
00153c 9321
00153d e020
00153e 9321
00153f e020
001540 9321
001541 950a
001542 f7c1
001543 e001
001544 e026
001545 9321
001546 e12c
001547 9321
001548 e020
001549 9321
00154a 950a
00154b f7c1
00154c e007
00154d e020
00154e 9321
00154f e020
001550 9321
001551 e020
001552 9321
001553 950a
001554 f7c1
001555 e001
001556 e026
001557 9321
001558 e12c
001559 9321
00155a e020
00155b 9321
00155c 950a
00155d f7c1
00155e e007
00155f e020
001560 9321
001561 e020
001562 9321
001563 e020
001564 9321
001565 950a
001566 f7c1
001567 e001
001568 e026
001569 9321
00156a e12c
00156b 9321
00156c e020
00156d 9321
00156e 950a
00156f f7c1
001570 e007
001571 e020
001572 9321
001573 e020
001574 9321
001575 e020
001576 9321
001577 950a
001578 f7c1
001579 e003
00157a e026
00157b 9321
00157c e12c
00157d 9321
00157e e020
00157f 9321
001580 950a
001581 f7c1
001582 e003
001583 e020
001584 9321
001585 e020
001586 9321
001587 e020
001588 9321
001589 950a
00158a f7c1
00158b e002
00158c e026
00158d 9321
00158e e12c
00158f 9321
001590 e020
001591 9321
001592 950a
001593 f7c1
001594 e003
001595 e026
001596 9321
001597 e12c
001598 9321
001599 e020
00159a 9321
00159b 950a
00159c f7c1
00159d e003
00159e e020
00159f 9321
0015a0 e020
0015a1 9321
0015a2 e020
0015a3 9321
0015a4 950a
0015a5 f7c1
0015a6 e002
0015a7 e026
0015a8 9321
0015a9 e12c
0015aa 9321
0015ab e020
0015ac 9321
0015ad 950a
0015ae f7c1
0015af e001
0015b0 e026
0015b1 9321
0015b2 e12c
0015b3 9321
0015b4 e020
0015b5 9321
0015b6 950a
0015b7 f7c1
0015b8 e007
0015b9 e020
0015ba 9321
0015bb e020
0015bc 9321
0015bd e020
0015be 9321
0015bf 950a
0015c0 f7c1
0015c1 e001
0015c2 e026
0015c3 9321
0015c4 e12c
0015c5 9321
0015c6 e020
0015c7 9321
0015c8 950a
0015c9 f7c1
0015ca e007
0015cb e020
0015cc 9321
0015cd e020
0015ce 9321
0015cf e020
0015d0 9321
0015d1 950a
0015d2 f7c1
0015d3 e001
0015d4 e026
0015d5 9321
0015d6 e12c
0015d7 9321
0015d8 e020
0015d9 9321
0015da 950a
0015db f7c1
0015dc e007
0015dd e020
0015de 9321
0015df e020
0015e0 9321
0015e1 e020
0015e2 9321
0015e3 950a
0015e4 f7c1
0015e5 e002
0015e6 e026
0015e7 9321
0015e8 e12c
0015e9 9321
0015ea e020
0015eb 9321
0015ec 950a
0015ed f7c1
0015ee e006
0015ef e020
0015f0 9321
0015f1 e020
0015f2 9321
0015f3 e020
0015f4 9321
0015f5 950a
0015f6 f7c1
0015f7 e003
0015f8 e026
0015f9 9321
0015fa e12c
0015fb 9321
0015fc e020
0015fd 9321
0015fe 950a
0015ff f7c1
001600 e005
001601 e020
001602 9321
001603 e020
001604 9321
001605 e020
001606 9321
001607 950a
001608 f7c1
001609 e004
00160a e026
00160b 9321
00160c e12c
00160d 9321
00160e e020
00160f 9321
001610 950a
001611 f7c1
001612 e004
001613 e020
001614 9321
001615 e020
001616 9321
001617 e020
001618 9321
001619 950a
00161a f7c1
00161b e001
00161c e026
00161d 9321
00161e e12c
00161f 9321
001620 e020
001621 9321
001622 950a
001623 f7c1
001624 e007
001625 e020
001626 9321
001627 e020
001628 9321
001629 e020
00162a 9321
00162b 950a
00162c f7c1
00162d e001
00162e e026
00162f 9321
001630 e12c
001631 9321
001632 e020
001633 9321
001634 950a
001635 f7c1
001636 e007
001637 e020
001638 9321
001639 e020
00163a 9321
00163b e020
00163c 9321
00163d 950a
00163e f7c1
00163f e001
001640 e026
001641 9321
001642 e12c
001643 9321
001644 e020
001645 9321
001646 950a
001647 f7c1
001648 e002
001649 e020
00164a 9321
00164b e020
00164c 9321
00164d e020
00164e 9321
00164f 950a
001650 f7c1
001651 e002
001652 e026
001653 9321
001654 e12c
001655 9321
001656 e020
001657 9321
001658 950a
001659 f7c1
00165a e003
00165b e020
00165c 9321
00165d e020
00165e 9321
00165f e020
001660 9321
001661 950a
001662 f7c1
001663 e001
001664 e026
001665 9321
001666 e12c
001667 9321
001668 e020
001669 9321
00166a 950a
00166b f7c1
00166c e002
00166d e020
00166e 9321
00166f e020
001670 9321
001671 e020
001672 9321
001673 950a
001674 f7c1
001675 e002
001676 e026
001677 9321
001678 e12c
001679 9321
00167a e020
00167b 9321
00167c 950a
00167d f7c1
00167e e003
00167f e020
001680 9321
001681 e020
001682 9321
001683 e020
001684 9321
001685 950a
001686 f7c1
001687 e001
001688 e026
001689 9321
00168a e12c
00168b 9321
00168c e020
00168d 9321
00168e 950a
00168f f7c1
001690 e007
001691 e020
001692 9321
001693 e020
001694 9321
001695 e020
001696 9321
001697 950a
001698 f7c1
001699 e001
00169a e026
00169b 9321
00169c e12c
00169d 9321
00169e e020
00169f 9321
0016a0 950a
0016a1 f7c1
0016a2 e007
0016a3 e020
0016a4 9321
0016a5 e020
0016a6 9321
0016a7 e020
0016a8 9321
0016a9 950a
0016aa f7c1
0016ab e001
0016ac e026
0016ad 9321
0016ae e12c
0016af 9321
0016b0 e020
0016b1 9321
0016b2 950a
0016b3 f7c1
0016b4 e002
0016b5 e020
0016b6 9321
0016b7 e020
0016b8 9321
0016b9 e020
0016ba 9321
0016bb 950a
0016bc f7c1
0016bd e005
0016be e026
0016bf 9321
0016c0 e12c
0016c1 9321
0016c2 e020
0016c3 9321
0016c4 950a
0016c5 f7c1
0016c6 e001
0016c7 e026
0016c8 9321
0016c9 e12c
0016ca 9321
0016cb e020
0016cc 9321
0016cd 950a
0016ce f7c1
0016cf e002
0016d0 e020
0016d1 9321
0016d2 e020
0016d3 9321
0016d4 e020
0016d5 9321
0016d6 950a
0016d7 f7c1
0016d8 e005
0016d9 e026
0016da 9321
0016db e12c
0016dc 9321
0016dd e020
0016de 9321
0016df 950a
0016e0 f7c1
0016e1 e001
0016e2 e026
0016e3 9321
0016e4 e12c
0016e5 9321
0016e6 e020
0016e7 9321
0016e8 950a
0016e9 f7c1
0016ea e007
0016eb e020
0016ec 9321
0016ed e020
0016ee 9321
0016ef e020
0016f0 9321
0016f1 950a
0016f2 f7c1
0016f3 e003
0016f4 e026
0016f5 9321
0016f6 e12c
0016f7 9321
0016f8 e020
0016f9 9321
0016fa 950a
0016fb f7c1
0016fc e003
0016fd e020
0016fe 9321
0016ff e020
001700 9321
001701 e020
001702 9321
001703 950a
001704 f7c1
001705 e002
001706 e026
001707 9321
001708 e12c
001709 9321
00170a e020
00170b 9321
00170c 950a
00170d f7c1
00170e e001
00170f e026
001710 9321
001711 e12c
001712 9321
001713 e020
001714 9321
001715 950a
001716 f7c1
001717 e007
001718 e020
001719 9321
00171a e020
00171b 9321
00171c e020
00171d 9321
00171e 950a
00171f f7c1
001720 e001
001721 e026
001722 9321
001723 e12c
001724 9321
001725 e020
001726 9321
001727 950a
001728 f7c1
001729 e002
00172a e020
00172b 9321
00172c e020
00172d 9321
00172e e020
00172f 9321
001730 950a
001731 f7c1
001732 e005
001733 e026
001734 9321
001735 e12c
001736 9321
001737 e020
001738 9321
001739 950a
00173a f7c1
00173b e001
00173c e026
00173d 9321
00173e e12c
00173f 9321
001740 e020
001741 9321
001742 950a
001743 f7c1
001744 e005
001745 e020
001746 9321
001747 e020
001748 9321
001749 e020
00174a 9321
00174b 950a
00174c f7c1
00174d e002
00174e e026
00174f 9321
001750 e12c
001751 9321
001752 e020
001753 9321
001754 950a
001755 f7c1
001756 e001
001757 e026
001758 9321
001759 e12c
00175a 9321
00175b e020
00175c 9321
00175d 950a
00175e f7c1
00175f e006
001760 e020
001761 9321
001762 e020
001763 9321
001764 e020
001765 9321
001766 950a
001767 f7c1
001768 e001
001769 e026
00176a 9321
00176b e12c
00176c 9321
00176d e020
00176e 9321
00176f 950a
001770 f7c1
001771 e001
001772 e026
001773 9321
001774 e12c
001775 9321
001776 e020
001777 9321
001778 950a
001779 f7c1
00177a e002
00177b e020
00177c 9321
00177d e020
00177e 9321
00177f e020
001780 9321
001781 950a
001782 f7c1
001783 e001
001784 e026
001785 9321
001786 e12c
001787 9321
001788 e020
001789 9321
00178a 950a
00178b f7c1
00178c e004
00178d e020
00178e 9321
00178f e020
001790 9321
001791 e020
001792 9321
001793 950a
001794 f7c1
001795 e001
001796 e026
001797 9321
001798 e12c
001799 9321
00179a e020
00179b 9321
00179c 950a
00179d f7c1
00179e e002
00179f e020
0017a0 9321
0017a1 e020
0017a2 9321
0017a3 e020
0017a4 9321
0017a5 950a
0017a6 f7c1
0017a7 e001
0017a8 e026
0017a9 9321
0017aa e12c
0017ab 9321
0017ac e020
0017ad 9321
0017ae 950a
0017af f7c1
0017b0 e004
0017b1 e020
0017b2 9321
0017b3 e020
0017b4 9321
0017b5 e020
0017b6 9321
0017b7 950a
0017b8 f7c1
0017b9 e001
0017ba e026
0017bb 9321
0017bc e12c
0017bd 9321
0017be e020
0017bf 9321
0017c0 950a
0017c1 f7c1
0017c2 e002
0017c3 e020
0017c4 9321
0017c5 e020
0017c6 9321
0017c7 e020
0017c8 9321
0017c9 950a
0017ca f7c1
0017cb e001
0017cc e026
0017cd 9321
0017ce e12c
0017cf 9321
0017d0 e020
0017d1 9321
0017d2 950a
0017d3 f7c1
0017d4 e004
0017d5 e020
0017d6 9321
0017d7 e020
0017d8 9321
0017d9 e020
0017da 9321
0017db 950a
0017dc f7c1
0017dd e001
0017de e026
0017df 9321
0017e0 e12c
0017e1 9321
0017e2 e020
0017e3 9321
0017e4 950a
0017e5 f7c1
0017e6 e004
0017e7 e020
0017e8 9321
0017e9 e020
0017ea 9321
0017eb e020
0017ec 9321
0017ed 950a
0017ee f7c1
0017ef e001
0017f0 e026
0017f1 9321
0017f2 e12c
0017f3 9321
0017f4 e020
0017f5 9321
0017f6 950a
0017f7 f7c1
0017f8 e002
0017f9 e020
0017fa 9321
0017fb e020
0017fc 9321
0017fd e020
0017fe 9321
0017ff 950a
001800 f7c1
001801 e001
001802 e026
001803 9321
001804 e12c
001805 9321
001806 e020
001807 9321
001808 950a
001809 f7c1
00180a e004
00180b e020
00180c 9321
00180d e020
00180e 9321
00180f e020
001810 9321
001811 950a
001812 f7c1
001813 e001
001814 e026
001815 9321
001816 e12c
001817 9321
001818 e020
001819 9321
00181a 950a
00181b f7c1
00181c e002
00181d e020
00181e 9321
00181f e020
001820 9321
001821 e020
001822 9321
001823 950a
001824 f7c1
001825 e001
001826 e026
001827 9321
001828 e12c
001829 9321
00182a e020
00182b 9321
00182c 950a
00182d f7c1
00182e e004
00182f e020
001830 9321
001831 e020
001832 9321
001833 e020
001834 9321
001835 950a
001836 f7c1
001837 e001
001838 e026
001839 9321
00183a e12c
00183b 9321
00183c e020
00183d 9321
00183e 950a
00183f f7c1
001840 e002
001841 e020
001842 9321
001843 e020
001844 9321
001845 e020
001846 9321
001847 950a
001848 f7c1
001849 e001
00184a e026
00184b 9321
00184c e12c
00184d 9321
00184e e020
00184f 9321
001850 950a
001851 f7c1
001852 e007
001853 e020
001854 9321
001855 e020
001856 9321
001857 e020
001858 9321
001859 950a
00185a f7c1
00185b e001
00185c e026
00185d 9321
00185e e12c
00185f 9321
001860 e020
001861 9321
001862 950a
001863 f7c1
001864 e007
001865 e020
001866 9321
001867 e020
001868 9321
001869 e020
00186a 9321
00186b 950a
00186c f7c1
00186d e002
00186e e026
00186f 9321
001870 e12c
001871 9321
001872 e020
001873 9321
001874 950a
001875 f7c1
001876 e006
001877 e020
001878 9321
001879 e020
00187a 9321
00187b e020
00187c 9321
00187d 950a
00187e f7c1
00187f e003
001880 e026
001881 9321
001882 e12c
001883 9321
001884 e020
001885 9321
001886 950a
001887 f7c1
001888 e005
001889 e020
00188a 9321
00188b e020
00188c 9321
00188d e020
00188e 9321
00188f 950a
001890 f7c1
001891 e002
001892 e026
001893 9321
001894 e12c
001895 9321
001896 e020
001897 9321
001898 950a
001899 f7c1
00189a e006
00189b e020
00189c 9321
00189d e020
00189e 9321
00189f e020
0018a0 9321
0018a1 950a
0018a2 f7c1
0018a3 e001
0018a4 e026
0018a5 9321
0018a6 e12c
0018a7 9321
0018a8 e020
0018a9 9321
0018aa 950a
0018ab f7c1
0018ac e006
0018ad e020
0018ae 9321
0018af e020
0018b0 9321
0018b1 e020
0018b2 9321
0018b3 950a
0018b4 f7c1
0018b5 e001
0018b6 e026
0018b7 9321
0018b8 e12c
0018b9 9321
0018ba e020
0018bb 9321
0018bc 950a
0018bd f7c1
0018be e001
0018bf e026
0018c0 9321
0018c1 e12c
0018c2 9321
0018c3 e020
0018c4 9321
0018c5 950a
0018c6 f7c1
0018c7 e005
0018c8 e020
0018c9 9321
0018ca e020
0018cb 9321
0018cc e020
0018cd 9321
0018ce 950a
0018cf f7c1
0018d0 e002
0018d1 e026
0018d2 9321
0018d3 e12c
0018d4 9321
0018d5 e020
0018d6 9321
0018d7 950a
0018d8 f7c1
0018d9 e001
0018da e026
0018db 9321
0018dc e12c
0018dd 9321
0018de e020
0018df 9321
0018e0 950a
0018e1 f7c1
0018e2 e004
0018e3 e020
0018e4 9321
0018e5 e020
0018e6 9321
0018e7 e020
0018e8 9321
0018e9 950a
0018ea f7c1
0018eb e003
0018ec e026
0018ed 9321
0018ee e12c
0018ef 9321
0018f0 e020
0018f1 9321
0018f2 950a
0018f3 f7c1
0018f4 e001
0018f5 e026
0018f6 9321
0018f7 e12c
0018f8 9321
0018f9 e020
0018fa 9321
0018fb 950a
0018fc f7c1
0018fd e005
0018fe e020
0018ff 9321
001900 e020
001901 9321
001902 e020
001903 9321
001904 950a
001905 f7c1
001906 e002
001907 e026
001908 9321
001909 e12c
00190a 9321
00190b e020
00190c 9321
00190d 950a
00190e f7c1
00190f e001
001910 e026
001911 9321
001912 e12c
001913 9321
001914 e020
001915 9321
001916 950a
001917 f7c1
001918 e006
001919 e020
00191a 9321
00191b e020
00191c 9321
00191d e020
00191e 9321
00191f 950a
001920 f7c1
001921 e001
001922 e026
001923 9321
001924 e12c
001925 9321
001926 e020
001927 9321
001928 950a
001929 f7c1
00192a e002
00192b e026
00192c 9321
00192d e12c
00192e 9321
00192f e020
001930 9321
001931 950a
001932 f7c1
001933 e006
001934 e020
001935 9321
001936 e020
001937 9321
001938 e020
001939 9321
00193a 950a
00193b f7c1
00193c e003
00193d e026
00193e 9321
00193f e12c
001940 9321
001941 e020
001942 9321
001943 950a
001944 f7c1
001945 e005
001946 e020
001947 9321
001948 e020
001949 9321
00194a e020
00194b 9321
00194c 950a
00194d f7c1
00194e e004
00194f e026
001950 9321
001951 e12c
001952 9321
001953 e020
001954 9321
001955 950a
001956 f7c1
001957 e004
001958 e020
001959 9321
00195a e020
00195b 9321
00195c e020
00195d 9321
00195e 950a
00195f f7c1
001960 e005
001961 e026
001962 9321
001963 e12c
001964 9321
001965 e020
001966 9321
001967 950a
001968 f7c1
001969 e003
00196a e020
00196b 9321
00196c e020
00196d 9321
00196e e020
00196f 9321
001970 950a
001971 f7c1
001972 e005
001973 e026
001974 9321
001975 e12c
001976 9321
001977 e020
001978 9321
001979 950a
00197a f7c1
00197b e003
00197c e020
00197d 9321
00197e e020
00197f 9321
001980 e020
001981 9321
001982 950a
001983 f7c1
001984 e005
001985 e026
001986 9321
001987 e12c
001988 9321
001989 e020
00198a 9321
00198b 950a
00198c f7c1
00198d e003
00198e e020
00198f 9321
001990 e020
001991 9321
001992 e020
001993 9321
001994 950a
001995 f7c1
001996 e001
001997 e026
001998 9321
001999 e12c
00199a 9321
00199b e020
00199c 9321
00199d 950a
00199e f7c1
00199f e007
0019a0 e020
0019a1 9321
0019a2 e020
0019a3 9321
0019a4 e020
0019a5 9321
0019a6 950a
0019a7 f7c1
0019a8 e001
0019a9 e026
0019aa 9321
0019ab e12c
0019ac 9321
0019ad e020
0019ae 9321
0019af 950a
0019b0 f7c1
0019b1 e007
0019b2 e020
0019b3 9321
0019b4 e020
0019b5 9321
0019b6 e020
0019b7 9321
0019b8 950a
0019b9 f7c1
0019ba e001
0019bb e026
0019bc 9321
0019bd e12c
0019be 9321
0019bf e020
0019c0 9321
0019c1 950a
0019c2 f7c1
0019c3 e007
0019c4 e020
0019c5 9321
0019c6 e020
0019c7 9321
0019c8 e020
0019c9 9321
0019ca 950a
0019cb f7c1
0019cc e004
0019cd e026
0019ce 9321
0019cf e12c
0019d0 9321
0019d1 e020
0019d2 9321
0019d3 950a
0019d4 f7c1
0019d5 e002
0019d6 e020
0019d7 9321
0019d8 e020
0019d9 9321
0019da e020
0019db 9321
0019dc 950a
0019dd f7c1
0019de e002
0019df e026
0019e0 9321
0019e1 e12c
0019e2 9321
0019e3 e020
0019e4 9321
0019e5 950a
0019e6 f7c1
0019e7 e001
0019e8 e026
0019e9 9321
0019ea e12c
0019eb 9321
0019ec e020
0019ed 9321
0019ee 950a
0019ef f7c1
0019f0 e007
0019f1 e020
0019f2 9321
0019f3 e020
0019f4 9321
0019f5 e020
0019f6 9321
0019f7 950a
0019f8 f7c1
0019f9 e003
0019fa e026
0019fb 9321
0019fc e12c
0019fd 9321
0019fe e020
0019ff 9321
001a00 950a
001a01 f7c1
001a02 e002
001a03 e020
001a04 9321
001a05 e020
001a06 9321
001a07 e020
001a08 9321
001a09 950a
001a0a f7c1
001a0b e003
001a0c e026
001a0d 9321
001a0e e12c
001a0f 9321
001a10 e020
001a11 9321
001a12 950a
001a13 f7c1
001a14 e001
001a15 e026
001a16 9321
001a17 e12c
001a18 9321
001a19 e020
001a1a 9321
001a1b 950a
001a1c f7c1
001a1d e007
001a1e e020
001a1f 9321
001a20 e020
001a21 9321
001a22 e020
001a23 9321
001a24 950a
001a25 f7c1
001a26 e002
001a27 e026
001a28 9321
001a29 e12c
001a2a 9321
001a2b e020
001a2c 9321
001a2d 950a
001a2e f7c1
001a2f e002
001a30 e020
001a31 9321
001a32 e020
001a33 9321
001a34 e020
001a35 9321
001a36 950a
001a37 f7c1
001a38 e004
001a39 e026
001a3a 9321
001a3b e12c
001a3c 9321
001a3d e020
001a3e 9321
001a3f 950a
001a40 f7c1
001a41 e001
001a42 e026
001a43 9321
001a44 e12c
001a45 9321
001a46 e020
001a47 9321
001a48 950a
001a49 f7c1
001a4a e007
001a4b e020
001a4c 9321
001a4d e020
001a4e 9321
001a4f e020
001a50 9321
001a51 950a
001a52 f7c1
001a53 e001
001a54 e026
001a55 9321
001a56 e12c
001a57 9321
001a58 e020
001a59 9321
001a5a 950a
001a5b f7c1
001a5c e007
001a5d e020
001a5e 9321
001a5f e020
001a60 9321
001a61 e020
001a62 9321
001a63 950a
001a64 f7c1
001a65 e001
001a66 e026
001a67 9321
001a68 e12c
001a69 9321
001a6a e020
001a6b 9321
001a6c 950a
001a6d f7c1
001a6e e007
001a6f e020
001a70 9321
001a71 e020
001a72 9321
001a73 e020
001a74 9321
001a75 950a
001a76 f7c1
001a77 e001
001a78 e026
001a79 9321
001a7a e12c
001a7b 9321
001a7c e020
001a7d 9321
001a7e 950a
001a7f f7c1
001a80 e007
001a81 e020
001a82 9321
001a83 e020
001a84 9321
001a85 e020
001a86 9321
001a87 950a
001a88 f7c1
001a89 e001
001a8a e026
001a8b 9321
001a8c e12c
001a8d 9321
001a8e e020
001a8f 9321
001a90 950a
001a91 f7c1
001a92 e007
001a93 e020
001a94 9321
001a95 e020
001a96 9321
001a97 e020
001a98 9321
001a99 950a
001a9a f7c1
001a9b e001
001a9c e026
001a9d 9321
001a9e e12c
001a9f 9321
001aa0 e020
001aa1 9321
001aa2 950a
001aa3 f7c1
001aa4 e007
001aa5 e020
001aa6 9321
001aa7 e020
001aa8 9321
001aa9 e020
001aaa 9321
001aab 950a
001aac f7c1
001aad e001
001aae e026
001aaf 9321
001ab0 e12c
001ab1 9321
001ab2 e020
001ab3 9321
001ab4 950a
001ab5 f7c1
001ab6 e007
001ab7 e020
001ab8 9321
001ab9 e020
001aba 9321
001abb e020
001abc 9321
001abd 950a
001abe f7c1
001abf e001
001ac0 e026
001ac1 9321
001ac2 e12c
001ac3 9321
001ac4 e020
001ac5 9321
001ac6 950a
001ac7 f7c1
001ac8 e007
001ac9 e020
001aca 9321
001acb e020
001acc 9321
001acd e020
001ace 9321
001acf 950a
001ad0 f7c1
001ad1 e001
001ad2 e026
001ad3 9321
001ad4 e12c
001ad5 9321
001ad6 e020
001ad7 9321
001ad8 950a
001ad9 f7c1
001ada e007
001adb e020
001adc 9321
001add e020
001ade 9321
001adf e020
001ae0 9321
001ae1 950a
001ae2 f7c1
001ae3 e001
001ae4 e026
001ae5 9321
001ae6 e12c
001ae7 9321
001ae8 e020
001ae9 9321
001aea 950a
001aeb f7c1
001aec e007
001aed e020
001aee 9321
001aef e020
001af0 9321
001af1 e020
001af2 9321
001af3 950a
001af4 f7c1                      	LEVEL1
                                 ;==================================================================================================================================================================================================================
                                 ;==================================================================================================================================================================================================================
                                 ;Partie affichage de la map
                                 restart:
001af5 e178                      	ldi b1, 0x18
001af6 e0e0                      	ldi zl,low(0x0400)
001af7 e0f4                      	ldi zh,high(0x0400)					;On replace z à l'origine du niveau						
                                 
001af8 e400
001af9 2e00                      	_LDI	r0,64
                                 loop:
001afa 9121                      	ld a0, z+
001afb 9131                      	ld a1, z+							;On charge dans a0, a1, a2 les composantes GRB de chaque pixel
001afc 9141                      	ld a2, z+							
                                 
001afd fd24                      	sbrc a0,4							;On vérifie que ici que le pixel soit vert
001afe 940e 0061                 	call shift_mario_in_memory			;S'il est vert, on enregistre l'adresse de la première composante du pixel vert pour de futurs calculs
                                 
001b00 94f8                      	cli
001b01 940e 0026                 	call ws2812b4_byte3wr				;Sous-routine qui va écrire des 0 et des 1 pour allumer les LEDs de la matrice
001b03 9478                      	sei
                                 
001b04 940a                      	dec r0
001b05 f7a1                      	brne loop
001b06 940e 0057                 	call ws2812b4_reset					;Reset nécessaire au bon fonctionnement de la matrice
                                 						
                                 attente_jump:		
001b08 9b81                      	sbis PIND, 1						;Lorsque le bouton 1 et pressé, le personnage saute, sinon  
001b09 940e 0081                 	call jump_mario						;on attend juste que le joueur avance ou saute dans cette boucle
001b0b fc70                      	sbrc r7, 0
001b0c 940c 0dcb                 	jmp inter_reset
001b0e fc71                      	sbrc r7, 1
001b0f 940c 0e34                 	jmp victory
001b11 cff6                      	rjmp attente_jump
                                 ;==================================================================================================================================================================================================================


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega128" register use summary:
x  :   6 y  :   0 z  :1096 r0 :  12 r1 :   6 r2 :  31 r3 :  89 r4 :  15 
r5 :  15 r6 :   4 r7 :   9 r8 :  11 r9 :  10 r10:   9 r11:  11 r12:  25 
r13:  14 r14:   6 r15:   6 r16:1020 r17:  14 r18:2180 r19:  23 r20:  20 
r21:  16 r22:  25 r23:  32 r24:  20 r25:  16 r26:   5 r27:   5 r28:   5 
r29:   1 r30:  36 r31:  31 
Registers used: 34 out of 35 (97.1%)

"ATmega128" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   3 add   :   5 adiw  :   5 and   :   0 
andi  :   9 asr   :   2 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   3 brcs  :   0 break :   0 breq  :  20 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 brlt  :   0 brmi  :   1 
brne  : 415 brpl  :   1 brsh  :   5 brtc  :   5 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   1 call  :  33 cbi   :   5 cbr   :   0 
clc   :  10 clh   :   0 cli   :   5 cln   :   0 clr   :  52 cls   :   0 
clt   :   2 clv   :   0 clz   :   3 com   :   8 cp    :   3 cpc   :   3 
cpi   :  17 cpse  :   0 dec   : 425 elpm  :   0 eor   :   1 fmul  :   0 
fmuls :   0 fmulsu:   0 icall :   1 ijmp  :   1 in    :   7 inc   :   6 
jmp   :  10 ld    :  16 ldd   :   0 ldi   :1568 lds   :   4 lpm   :  12 
lsl   :   4 lsr   :   3 mov   : 117 movw  :   0 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :  15 or    :   0 ori   :   3 out   :  24 
pop   :  48 push  :  46 rcall :  36 ret   :  30 reti  :   3 rjmp  :  79 
rol   :  10 ror   :  13 sbc   :  10 sbci  :   0 sbi   :   8 sbic  :   0 
sbis  :   5 sbiw  :   0 sbr   :   1 sbrc  :  31 sbrs  :   5 sec   :   0 
seh   :   0 sei   :   3 sen   :   0 ser   :   0 ses   :   0 set   :   2 
sev   :   0 sez   :   1 sleep :   0 spm   :   0 st    :1086 std   :   0 
sts   :   4 sub   :  10 subi  :   7 swap  :   4 tst   :   9 wdr   :   0 

Instructions used: 65 out of 114 (57.0%)

"ATmega128" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x006066   8656    386   9042  131072   6.9%
[.dseg] 0x000100 0x000101      0      1      1    4096   0.0%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 14 warnings
